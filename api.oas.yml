components:
  schemas:
    ActionType:
      enum:
        - comment-create
        - comment-delete
        - comment-reply-create
        - comment-reply-delete
        - comment-reply-update
        - comment-update
        - diagram-content-create
        - diagram-content-delete
        - diagram-content-update
        - diagram-create
        - diagram-delete
        - diagram-group-create
        - diagram-group-delete
        - diagram-group-update
        - diagram-update
        - domain-create
        - domain-delete
        - domain-update
        - flow-create
        - flow-delete
        - flow-update
        - model-connection-create
        - model-connection-delete
        - model-connection-update
        - model-object-create
        - model-object-delete
        - model-object-update
        - tag-create
        - tag-delete
        - tag-group-create
        - tag-group-delete
        - tag-group-update
        - tag-update
        - tour-create
        - tour-delete
        - tour-update
        - version-create
        - version-revert-create
      type: string
    ActionContextModelObject:
      properties:
        handleId:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/ModelObjectType"
      required:
        - handleId
        - name
        - type
      type: object
    ActionVersionCreateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      type: object
    ActionVersionCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionVersionCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/VersionRequired"
        type:
          enum:
            - version-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionVersionRevertContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionVersionRevertCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionVersionRevertContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/VersionRevertRequired"
        type:
          enum:
            - version-revert-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionCommentCreateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        targetHandleId:
          type: string
        targetName:
          type: string
      type: object
    ActionCommentCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionCommentCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentRequired"
        type:
          enum:
            - comment-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionCommentUpdateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        targetHandleId:
          type: string
        targetName:
          type: string
      type: object
    ActionCommentUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionCommentUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentPartial"
        type:
          enum:
            - comment-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionCommentDeleteContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        targetHandleId:
          type: string
        targetName:
          type: string
      type: object
    ActionCommentDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionCommentDeleteContext"
        id:
          type: string
        type:
          enum:
            - comment-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionCommentReplyCreateContext:
      properties:
        commentHandleId:
          type: string
        domainHandleId:
          type: string
        domainName:
          type: string
      type: object
    ActionCommentReplyCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionCommentReplyCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentReplyRequired"
        type:
          enum:
            - comment-reply-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionCommentReplyUpdateContext:
      properties:
        commentHandleId:
          type: string
        domainHandleId:
          type: string
        domainName:
          type: string
      type: object
    ActionCommentReplyUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionCommentReplyUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentReplyPartial"
        type:
          enum:
            - comment-reply-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionCommentReplyDeleteContext:
      properties:
        commentHandleId:
          type: string
        domainHandleId:
          type: string
        domainName:
          type: string
      type: object
    ActionCommentReplyDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionCommentReplyDeleteContext"
        id:
          type: string
        type:
          enum:
            - comment-reply-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionDiagramCreateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        groupHandleId:
          type: string
        groupName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      type: object
    ActionDiagramCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramRequired"
        type:
          enum:
            - diagram-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDiagramUpdateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        groupHandleId:
          type: string
        groupName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
      required:
        - name
        - type
      type: object
    ActionDiagramUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramPartial"
        type:
          enum:
            - diagram-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDiagramDeleteContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
      required:
        - name
        - type
      type: object
    ActionDiagramDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramDeleteContext"
        id:
          type: string
        type:
          enum:
            - diagram-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionDiagramContentContextConnection:
      properties:
        modelHandleId:
          nullable: true
          type: string
        modelName:
          nullable: true
          type: string
      required:
        - modelHandleId
        - modelName
      type: object
    ActionDiagramContentContextObject:
      properties:
        modelHandleId:
          type: string
        modelName:
          type: string
        modelType:
          $ref: "#/components/schemas/ModelObjectType"
        type:
          $ref: "#/components/schemas/DiagramObjectType"
      required:
        - modelHandleId
        - modelName
        - modelType
        - type
      type: object
    ActionDiagramContentCreateContext:
      properties:
        connections:
          additionalProperties:
            $ref: "#/components/schemas/ActionDiagramContentContextConnection"
          type: object
        domainHandleId:
          type: string
        domainName:
          type: string
        groupHandleId:
          type: string
        groupName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        objects:
          additionalProperties:
            $ref: "#/components/schemas/ActionDiagramContentContextObject"
          type: object
        type:
          $ref: "#/components/schemas/DiagramType"
      required:
        - name
        - type
      type: object
    ActionDiagramContentCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramContentCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramContentRequired"
        type:
          enum:
            - diagram-content-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDiagramContentUpdateContext:
      properties:
        connections:
          additionalProperties:
            $ref: "#/components/schemas/ActionDiagramContentContextConnection"
          type: object
        domainHandleId:
          type: string
        domainName:
          type: string
        groupHandleId:
          type: string
        groupName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        objects:
          additionalProperties:
            $ref: "#/components/schemas/ActionDiagramContentContextObject"
          type: object
        type:
          $ref: "#/components/schemas/DiagramType"
      required:
        - name
        - type
      type: object
    ActionDiagramContentUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramContentUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramContentPartial"
        type:
          enum:
            - diagram-content-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDiagramContentDeleteContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
      required:
        - name
        - type
      type: object
    ActionDiagramContentDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramContentDeleteContext"
        id:
          type: string
        type:
          enum:
            - diagram-content-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionDiagramGroupCreateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      type: object
    ActionDiagramGroupCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramGroupCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramGroupRequired"
        type:
          enum:
            - diagram-group-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDiagramGroupUpdateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
      required:
        - name
      type: object
    ActionDiagramGroupUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramGroupUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramGroupPartial"
        type:
          enum:
            - diagram-group-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDiagramGroupDeleteContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
      required:
        - name
      type: object
    ActionDiagramGroupDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionDiagramGroupDeleteContext"
        id:
          type: string
        type:
          enum:
            - diagram-group-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionDomainCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/DomainRequired"
        type:
          enum:
            - domain-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    ActionDomainUpdateContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionDomainUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionDomainUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/DomainPartial"
        type:
          enum:
            - domain-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionDomainDeleteContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionDomainDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionDomainDeleteContext"
        id:
          type: string
        type:
          enum:
            - domain-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionFlowCreateContext:
      properties:
        diagramHandleId:
          type: string
        diagramName:
          type: string
        diagramType:
          $ref: "#/components/schemas/DiagramType"
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      type: object
    ActionFlowCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionFlowCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/FlowRequired"
        type:
          enum:
            - flow-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionFlowContextObject:
      properties:
        type:
          $ref: "#/components/schemas/DiagramObjectType"
      required:
        - type
      type: object
    ActionFlowUpdateContext:
      properties:
        diagramHandleId:
          type: string
        diagramName:
          type: string
        diagramType:
          $ref: "#/components/schemas/DiagramType"
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        objects:
          additionalProperties:
            $ref: "#/components/schemas/ActionFlowContextObject"
          type: object
      required:
        - name
      type: object
    ActionFlowUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionFlowUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/FlowPartial"
        type:
          enum:
            - flow-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionFlowDeleteContext:
      properties:
        diagramHandleId:
          type: string
        diagramName:
          type: string
        diagramType:
          $ref: "#/components/schemas/DiagramType"
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
      required:
        - name
      type: object
    ActionFlowDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionFlowDeleteContext"
        id:
          type: string
        type:
          enum:
            - flow-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionModelConnectionCreateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        originModelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        tagNames:
          additionalProperties:
            type: string
          type: object
        targetModelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      type: object
    ActionModelConnectionCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionModelConnectionCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelConnectionRequired"
        type:
          enum:
            - model-connection-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionModelConnectionUpdateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        name:
          type: string
        originModelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        tagNames:
          additionalProperties:
            type: string
          type: object
        targetModelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      required:
        - name
      type: object
    ActionModelConnectionUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionModelConnectionUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelConnectionPartial"
        type:
          enum:
            - model-connection-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionModelConnectionDeleteContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        name:
          type: string
        originModelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        tagNames:
          additionalProperties:
            type: string
          type: object
        targetModelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
      required:
        - name
      type: object
    ActionModelConnectionDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionModelConnectionDeleteContext"
        id:
          type: string
        name:
          type: string
        type:
          enum:
            - model-connection-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionModelObjectCreateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        tagNames:
          additionalProperties:
            type: string
          type: object
        teamNames:
          additionalProperties:
            type: string
          type: object
      type: object
    ActionModelObjectCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionModelObjectCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelObjectRequired"
        type:
          enum:
            - model-object-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionModelObjectUpdateContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        tagNames:
          additionalProperties:
            type: string
          type: object
        teamNames:
          additionalProperties:
            type: string
          type: object
        type:
          $ref: "#/components/schemas/ModelObjectType"
      required:
        - name
        - type
      type: object
    ActionModelObjectUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionModelObjectUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelObjectPartial"
        type:
          enum:
            - model-object-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionModelObjectDeleteContext:
      properties:
        domainHandleId:
          type: string
        domainName:
          type: string
        modelFamily:
          items:
            $ref: "#/components/schemas/ActionContextModelObject"
          type: array
        name:
          type: string
        tagNames:
          additionalProperties:
            type: string
          type: object
        teamNames:
          additionalProperties:
            type: string
          type: object
        type:
          $ref: "#/components/schemas/ModelObjectType"
      required:
        - name
        - type
      type: object
    ActionModelObjectDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionModelObjectDeleteContext"
        id:
          type: string
        type:
          enum:
            - model-object-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionTagCreateContext:
      properties:
        groupHandleId:
          type: string
        groupName:
          type: string
      type: object
    ActionTagCreate:
      properties:
        context:
          $ref: "#/components/schemas/ActionTagCreateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagRequired"
        type:
          enum:
            - tag-create
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionTagUpdateContext:
      properties:
        groupHandleId:
          type: string
        groupName:
          type: string
        name:
          type: string
      required:
        - name
      type: object
    ActionTagUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionTagUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagPartial"
        type:
          enum:
            - tag-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionTagDeleteContext:
      properties:
        groupHandleId:
          type: string
        groupName:
          type: string
        name:
          type: string
      required:
        - name
      type: object
    ActionTagDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionTagDeleteContext"
        id:
          type: string
        type:
          enum:
            - tag-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionTagGroupCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagGroupRequired"
        type:
          enum:
            - tag-group-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    ActionTagGroupUpdateContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionTagGroupUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionTagGroupUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagGroupPartial"
        type:
          enum:
            - tag-group-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionTagGroupDeleteContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionTagGroupDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionTagGroupDeleteContext"
        id:
          type: string
        type:
          enum:
            - tag-group-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    ActionTourCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TourRequired"
        type:
          enum:
            - tour-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    ActionTourUpdateContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionTourUpdate:
      properties:
        context:
          $ref: "#/components/schemas/ActionTourUpdateContext"
        id:
          type: string
        props:
          $ref: "#/components/schemas/TourPartial"
        type:
          enum:
            - tour-update
          type: string
      required:
        - context
        - id
        - props
        - type
      type: object
    ActionTourDeleteContext:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    ActionTourDelete:
      properties:
        context:
          $ref: "#/components/schemas/ActionTourDeleteContext"
        id:
          type: string
        type:
          enum:
            - tour-delete
          type: string
      required:
        - context
        - id
        - type
      type: object
    Action:
      oneOf:
        - $ref: "#/components/schemas/ActionVersionCreate"
        - $ref: "#/components/schemas/ActionVersionRevertCreate"
        - $ref: "#/components/schemas/ActionCommentCreate"
        - $ref: "#/components/schemas/ActionCommentUpdate"
        - $ref: "#/components/schemas/ActionCommentDelete"
        - $ref: "#/components/schemas/ActionCommentReplyCreate"
        - $ref: "#/components/schemas/ActionCommentReplyUpdate"
        - $ref: "#/components/schemas/ActionCommentReplyDelete"
        - $ref: "#/components/schemas/ActionDiagramCreate"
        - $ref: "#/components/schemas/ActionDiagramUpdate"
        - $ref: "#/components/schemas/ActionDiagramContentCreate"
        - $ref: "#/components/schemas/ActionDiagramContentUpdate"
        - $ref: "#/components/schemas/ActionDiagramContentDelete"
        - $ref: "#/components/schemas/ActionDiagramDelete"
        - $ref: "#/components/schemas/ActionDiagramGroupCreate"
        - $ref: "#/components/schemas/ActionDiagramGroupUpdate"
        - $ref: "#/components/schemas/ActionDiagramGroupDelete"
        - $ref: "#/components/schemas/ActionDomainCreate"
        - $ref: "#/components/schemas/ActionDomainUpdate"
        - $ref: "#/components/schemas/ActionDomainDelete"
        - $ref: "#/components/schemas/ActionModelObjectCreate"
        - $ref: "#/components/schemas/ActionModelObjectUpdate"
        - $ref: "#/components/schemas/ActionModelObjectDelete"
        - $ref: "#/components/schemas/ActionModelConnectionCreate"
        - $ref: "#/components/schemas/ActionModelConnectionUpdate"
        - $ref: "#/components/schemas/ActionModelConnectionDelete"
        - $ref: "#/components/schemas/ActionFlowCreate"
        - $ref: "#/components/schemas/ActionFlowUpdate"
        - $ref: "#/components/schemas/ActionFlowDelete"
        - $ref: "#/components/schemas/ActionTagCreate"
        - $ref: "#/components/schemas/ActionTagUpdate"
        - $ref: "#/components/schemas/ActionTagDelete"
        - $ref: "#/components/schemas/ActionTagGroupCreate"
        - $ref: "#/components/schemas/ActionTagGroupUpdate"
        - $ref: "#/components/schemas/ActionTagGroupDelete"
        - $ref: "#/components/schemas/ActionTourCreate"
        - $ref: "#/components/schemas/ActionTourUpdate"
        - $ref: "#/components/schemas/ActionTourDelete"
    ActionLogFilter:
      properties:
        actionId:
          type: string
        actionsFromContext:
          type: boolean
        endAtDate:
          format: date-time
          type: string
        endAtId:
          type: string
        endBeforeDate:
          format: date-time
          type: string
        endBeforeId:
          type: string
        importance:
          oneOf:
            - $ref: "#/components/schemas/ActionLogImportance"
            - items:
                $ref: "#/components/schemas/ActionLogImportance"
              type: array
        limit:
          type: number
        limitToLast:
          type: number
        order:
          enum:
            - asc
            - desc
          type: string
        startAfterDate:
          format: date-time
          type: string
        startAfterId:
          type: string
        startAtDate:
          format: date-time
          type: string
        startAtId:
          type: string
      type: object
    ActionLogImportance:
      enum:
        - low
        - medium
        - high
      type: string
    ActionLog:
      properties:
        action:
          $ref: "#/components/schemas/Action"
        actionIds:
          items:
            type: string
          type: array
        id:
          type: string
        importance:
          $ref: "#/components/schemas/ActionLogImportance"
        landscapeId:
          type: string
        parentId:
          nullable: true
          type: string
        performedAt:
          format: date-time
          type: string
        performedBy:
          $ref: "#/components/schemas/AuthType"
        performedById:
          type: string
        performedByName:
          type: string
      required:
        - action
        - actionIds
        - id
        - importance
        - landscapeId
        - parentId
        - performedAt
        - performedBy
        - performedById
      type: object
    ActionLogPeriodLength:
      enum:
        - month
        - week
        - day
      type: string
    ActionLogPeriod:
      properties:
        actionId:
          type: string
        actionParentId:
          nullable: true
          type: string
        actionType:
          $ref: "#/components/schemas/ActionType"
        count:
          type: number
        id:
          type: string
        importance:
          $ref: "#/components/schemas/ActionLogImportance"
        landscapeId:
          type: string
        periodLength:
          $ref: "#/components/schemas/ActionLogPeriodLength"
        periodStartAt:
          format: date-time
          type: string
      required:
        - actionId
        - actionParentId
        - actionType
        - count
        - id
        - importance
        - landscapeId
        - periodLength
        - periodStartAt
      type: object
    ApiKeyPartial:
      properties:
        name:
          type: string
        permission:
          $ref: "#/components/schemas/PermissionType"
      type: object
    ApiKeyRequired:
      properties:
        name:
          type: string
        permission:
          $ref: "#/components/schemas/PermissionType"
      required:
        - name
        - permission
      type: object
    ApiKey:
      properties:
        name:
          type: string
        permission:
          $ref: "#/components/schemas/PermissionType"
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        organizationId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - name
        - permission
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
      type: object
    AutomationComparison:
      properties:
        operator:
          enum:
            - ==
            - "!="
            - ">"
            - <
            - ">="
            - <=
          type: string
        path:
          type: string
        value:
          oneOf:
            - nullable: true
              type: string
            - nullable: true
              type: number
            - nullable: true
              type: boolean
      required:
        - operator
        - path
        - value
      type: object
    AutomationLogic:
      properties:
        comparisons:
          items:
            $ref: "#/components/schemas/AutomationComparison"
          type: array
        operator:
          enum:
            - and
            - or
          type: string
      required:
        - comparisons
        - operator
      type: object
    AutomationCondition:
      oneOf:
        - $ref: "#/components/schemas/AutomationComparison"
        - $ref: "#/components/schemas/AutomationLogic"
    AutomationPartial:
      properties:
        activeVersion:
          type: string
        event:
          type: string
        name:
          type: string
        status:
          enum:
            - enabled
            - disabled
          type: string
        versions:
          additionalProperties:
            $ref: "#/components/schemas/AutomationVersion"
          type: object
      type: object
    AutomationRequired:
      properties:
        activeVersion:
          type: string
        event:
          type: string
        name:
          type: string
        status:
          enum:
            - enabled
            - disabled
          type: string
        versions:
          additionalProperties:
            $ref: "#/components/schemas/AutomationVersion"
          type: object
      required:
        - activeVersion
        - status
        - versions
      type: object
    Automation:
      properties:
        activeVersion:
          type: string
        event:
          type: string
        name:
          type: string
        status:
          enum:
            - enabled
            - disabled
          type: string
        versions:
          additionalProperties:
            $ref: "#/components/schemas/AutomationVersion"
          type: object
        createdAt:
          format: date-time
          type: string
        id:
          type: string
      required:
        - activeVersion
        - status
        - versions
        - createdAt
        - id
      type: object
    AutomationInputDataComment:
      properties:
        body:
          $ref: "#/components/schemas/CommentBody"
        createdAt:
          format: date-time
          type: string
        handleId:
          type: string
        id:
          type: string
        mentionedUserIds:
          items:
            type: string
          type: array
        target:
          $ref: "#/components/schemas/CommentTarget"
        url:
          type: string
        versionId:
          type: string
      required:
        - body
        - createdAt
        - handleId
        - id
        - mentionedUserIds
        - target
        - url
        - versionId
      type: object
    AutomationInputDataDiagram:
      properties:
        createdAt:
          format: date-time
          type: string
        handleId:
          type: string
        id:
          type: string
        name:
          type: string
        thumbnailUrl:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
        url:
          type: string
        versionId:
          type: string
      required:
        - createdAt
        - handleId
        - id
        - name
        - thumbnailUrl
        - type
        - url
        - versionId
      type: object
    AutomationInputDataShareLink:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        versionId:
          type: string
      required:
        - createdAt
        - id
        - versionId
      type: object
    AutomationInputData:
      properties:
        activeComments:
          properties:
            ideas:
              items:
                $ref: "#/components/schemas/AutomationInputDataComment"
              type: array
            inaccuracies:
              items:
                $ref: "#/components/schemas/AutomationInputDataComment"
              type: array
            questions:
              items:
                $ref: "#/components/schemas/AutomationInputDataComment"
              type: array
          required:
            - ideas
            - inaccuracies
            - questions
          type: object
        appUrl:
          type: string
        comment:
          $ref: "#/components/schemas/AutomationInputDataComment"
        commentMentionedUsers:
          items:
            $ref: "#/components/schemas/User"
          type: array
        commentReply:
          $ref: "#/components/schemas/CommentReply"
        commentReplyMentionedUsers:
          items:
            $ref: "#/components/schemas/User"
          type: array
        diagram:
          $ref: "#/components/schemas/Diagram"
        diagramUrl:
          type: string
        domain:
          $ref: "#/components/schemas/Domain"
        domainSubscriptionUsers:
          items:
            $ref: "#/components/schemas/User"
          type: array
        domainUrl:
          type: string
        domainsWithSubscriptions:
          items:
            $ref: "#/components/schemas/Domain"
          type: array
        each:
          items:
            type: object
          type: array
        landscape:
          $ref: "#/components/schemas/Landscape"
        landscapeUrl:
          type: string
        organization:
          $ref: "#/components/schemas/Organization"
        organizationAdminUsers:
          items:
            $ref: "#/components/schemas/User"
          type: array
        organizationPermission:
          $ref: "#/components/schemas/PermissionType"
        organizationSeatsUnused:
          type: number
        organizationUrl:
          type: string
        organizationUserGoal:
          $ref: "#/components/schemas/UserGoalName"
        organizationUserInvite:
          $ref: "#/components/schemas/OrganizationUserInvite"
        organizationUserInviteSamlUrl:
          type: string
        organizationUserInviteUrl:
          type: string
        organizationUsers:
          items:
            $ref: "#/components/schemas/User"
          type: array
        primaryOrganization:
          $ref: "#/components/schemas/Organization"
        primaryOrganizationPermission:
          $ref: "#/components/schemas/PermissionType"
        primaryOrganizationUrl:
          type: string
        primaryOrganizationUserGoal:
          $ref: "#/components/schemas/UserGoalName"
        primaryOrganizationUsers:
          items:
            $ref: "#/components/schemas/User"
          type: array
        shareLinks:
          items:
            $ref: "#/components/schemas/AutomationInputDataShareLink"
          type: array
        shareLinksVisitorCount:
          type: number
        topDomainDiagramStartAt:
          format: date-time
          type: string
        topDomainDiagrams:
          properties:
            app:
              items:
                $ref: "#/components/schemas/AutomationInputDataDiagram"
              type: array
            component:
              items:
                $ref: "#/components/schemas/AutomationInputDataDiagram"
              type: array
            context:
              items:
                $ref: "#/components/schemas/AutomationInputDataDiagram"
              type: array
          required:
            - app
            - component
            - context
          type: object
        user:
          $ref: "#/components/schemas/User"
        userGoalStatus:
          additionalProperties:
            $ref: "#/components/schemas/UserGoalStatus"
          type: object
      type: object
    AutomationInputDataKey:
      enum:
        - activeComments
        - appUrl
        - comment
        - commentMentionedUsers
        - commentReply
        - commentReplyMentionedUsers
        - diagram
        - diagramUrl
        - domain
        - domainSubscriptionUsers
        - domainUrl
        - domainsWithSubscriptions
        - each
        - landscape
        - landscapeUrl
        - organization
        - organizationAdminUsers
        - organizationPermission
        - organizationSeatsUnused
        - organizationUrl
        - organizationUserGoal
        - organizationUserInvite
        - organizationUserInviteSamlUrl
        - organizationUserInviteUrl
        - organizationUsers
        - primaryOrganization
        - primaryOrganizationPermission
        - primaryOrganizationUrl
        - primaryOrganizationUserGoal
        - primaryOrganizationUsers
        - shareLinks
        - shareLinksVisitorCount
        - topDomainDiagramStartAt
        - topDomainDiagrams
        - user
        - userGoalStatus
      type: string
    AutomationRunPartial:
      properties:
        automationId:
          type: string
        automationVersion:
          type: string
        stepIndex:
          type: number
        stepIndexCompletedAt:
          items:
            format: date-time
            type: string
          type: array
        trigger:
          $ref: "#/components/schemas/AutomationTrigger"
        uniqueKey:
          type: string
      type: object
    AutomationRunRequired:
      properties:
        automationId:
          type: string
        automationVersion:
          type: string
        stepIndex:
          type: number
        stepIndexCompletedAt:
          items:
            format: date-time
            type: string
          type: array
        trigger:
          $ref: "#/components/schemas/AutomationTrigger"
        uniqueKey:
          type: string
      required:
        - automationId
        - automationVersion
        - stepIndex
        - stepIndexCompletedAt
        - trigger
        - uniqueKey
      type: object
    AutomationRun:
      properties:
        automationId:
          type: string
        automationVersion:
          type: string
        stepIndex:
          type: number
        stepIndexCompletedAt:
          items:
            format: date-time
            type: string
          type: array
        trigger:
          $ref: "#/components/schemas/AutomationTrigger"
        uniqueKey:
          type: string
        createdAt:
          format: date-time
          type: string
        error:
          type: string
        executedAt:
          format: date-time
          type: string
        id:
          type: string
        status:
          enum:
            - idle
            - executing
            - error
            - exited
            - completed
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - automationId
        - automationVersion
        - stepIndex
        - stepIndexCompletedAt
        - trigger
        - uniqueKey
        - createdAt
        - executedAt
        - id
        - status
      type: object
    AutomationStepType:
      enum:
        - loop
        - send-email
        - trigger
        - wait-condition
        - wait-time
      type: string
    AutomationStepAttributes:
      properties:
        event:
          type: string
        eventData:
          type: object
        name:
          type: string
        skip:
          $ref: "#/components/schemas/AutomationCondition"
      type: object
    AutomationStepWaitTime:
      properties:
        seconds:
          type: number
        type:
          enum:
            - wait-time
          type: string
      required:
        - seconds
        - type
      type: object
    AutomationStepWaitCondition:
      properties:
        condition:
          $ref: "#/components/schemas/AutomationCondition"
        type:
          enum:
            - wait-condition
          type: string
      required:
        - condition
        - type
      type: object
    AutomationStepSendEmail:
      properties:
        from:
          properties:
            email:
              type: string
            name:
              type: string
          required:
            - email
          type: object
        replyTo:
          properties:
            email:
              type: string
            name:
              type: string
          required:
            - email
          type: object
        templateData:
          type: object
        templateId:
          type: string
        to:
          properties:
            email:
              type: string
            id:
              type: string
            name:
              type: string
          required:
            - email
          type: object
        type:
          enum:
            - send-email
          type: string
        unsubscribeGroupId:
          type: number
      required:
        - templateId
        - to
        - type
      type: object
    AutomationStepTrigger:
      properties:
        trigger:
          $ref: "#/components/schemas/AutomationTrigger"
        type:
          enum:
            - trigger
          type: string
      required:
        - trigger
        - type
      type: object
    AutomationStepLoop:
      properties:
        each:
          type: string
        step:
          $ref: "#/components/schemas/AutomationLoopStep"
        type:
          enum:
            - loop
          type: string
      required:
        - step
        - each
        - type
      type: object
    AutomationLoopStep:
      oneOf:
        - $ref: "#/components/schemas/AutomationStepSendEmail"
        - $ref: "#/components/schemas/AutomationStepTrigger"
    AutomationStep:
      oneOf:
        - allOf:
            - $ref: "#/components/schemas/AutomationStepWaitTime"
            - $ref: "#/components/schemas/AutomationStepAttributes"
        - allOf:
            - $ref: "#/components/schemas/AutomationStepWaitCondition"
            - $ref: "#/components/schemas/AutomationStepAttributes"
        - allOf:
            - $ref: "#/components/schemas/AutomationStepSendEmail"
            - $ref: "#/components/schemas/AutomationStepAttributes"
        - allOf:
            - $ref: "#/components/schemas/AutomationStepTrigger"
            - $ref: "#/components/schemas/AutomationStepAttributes"
        - allOf:
            - $ref: "#/components/schemas/AutomationStepLoop"
            - $ref: "#/components/schemas/AutomationStepAttributes"
    AutomationTriggerType:
      enum:
        - comment-create
        - comment-reply-create
        - comment-status-update
        - domain-updates
        - organization-create
        - organization-user-invite-create
        - organization-user-invite-used
        - schedule
        - user-goal-invite-organization-member-progress
        - user-register
      type: string
    AutomationTriggerSchedule:
      properties:
        date:
          format: date-time
          type: string
        type:
          enum:
            - schedule
          type: string
      required:
        - date
        - type
      type: object
    AutomationTriggerCommentCreate:
      properties:
        commentId:
          type: string
        landscapeId:
          type: string
        organizationId:
          type: string
        type:
          enum:
            - comment-create
          type: string
        userId:
          type: string
      required:
        - commentId
        - landscapeId
        - organizationId
        - type
        - userId
      type: object
    AutomationTriggerCommentReplyCreate:
      properties:
        commentId:
          type: string
        commentReplyId:
          type: string
        landscapeId:
          type: string
        organizationId:
          type: string
        type:
          enum:
            - comment-reply-create
          type: string
        userId:
          type: string
      required:
        - commentId
        - commentReplyId
        - landscapeId
        - organizationId
        - type
        - userId
      type: object
    AutomationTriggerCommentStatusUpdate:
      properties:
        commentId:
          type: string
        landscapeId:
          type: string
        organizationId:
          type: string
        type:
          enum:
            - comment-status-update
          type: string
        userId:
          type: string
      required:
        - commentId
        - landscapeId
        - organizationId
        - type
        - userId
      type: object
    AutomationTriggerUserRegister:
      properties:
        type:
          enum:
            - user-register
          type: string
        userId:
          type: string
      required:
        - type
        - userId
      type: object
    AutomationTriggerUserGoalInviteOrganizationMemberProgress:
      properties:
        type:
          enum:
            - user-goal-invite-organization-member-progress
          type: string
        userGoalId:
          type: string
        userId:
          type: string
      required:
        - type
        - userGoalId
        - userId
      type: object
    AutomationTriggerOrganizationCreate:
      properties:
        organizationId:
          type: string
        type:
          enum:
            - organization-create
          type: string
        userId:
          type: string
      required:
        - organizationId
        - type
        - userId
      type: object
    AutomationTriggerOrganizationUserInviteCreate:
      properties:
        organizationId:
          type: string
        organizationUserInviteId:
          type: string
        type:
          enum:
            - organization-user-invite-create
          type: string
        userId:
          type: string
      required:
        - organizationId
        - organizationUserInviteId
        - type
        - userId
      type: object
    AutomationTriggerOrganizationUserInviteUsed:
      properties:
        organizationId:
          type: string
        organizationUserInviteId:
          type: string
        type:
          enum:
            - organization-user-invite-used
          type: string
        userId:
          type: string
      required:
        - organizationId
        - organizationUserInviteId
        - type
        - userId
      type: object
    AutomationTriggerDomainUpdates:
      properties:
        domainId:
          type: string
        landscapeId:
          type: string
        type:
          enum:
            - domain-updates
          type: string
      required:
        - domainId
        - landscapeId
        - type
      type: object
    AutomationTrigger:
      oneOf:
        - $ref: "#/components/schemas/AutomationTriggerSchedule"
        - $ref: "#/components/schemas/AutomationTriggerCommentCreate"
        - $ref: "#/components/schemas/AutomationTriggerCommentReplyCreate"
        - $ref: "#/components/schemas/AutomationTriggerCommentStatusUpdate"
        - $ref: "#/components/schemas/AutomationTriggerUserRegister"
        - $ref:
            "#/components/schemas/AutomationTriggerUserGoalInviteOrganizationMemberPr\
            ogress"
        - $ref: "#/components/schemas/AutomationTriggerOrganizationCreate"
        - $ref: "#/components/schemas/AutomationTriggerOrganizationUserInviteCreate"
        - $ref: "#/components/schemas/AutomationTriggerOrganizationUserInviteUsed"
        - $ref: "#/components/schemas/AutomationTriggerDomainUpdates"
    AutomationVersionType:
      enum:
        - schedule
        - trigger
      type: string
    AutomationVersionTrigger:
      properties:
        enterCondition:
          $ref: "#/components/schemas/AutomationCondition"
        exitCondition:
          $ref: "#/components/schemas/AutomationCondition"
        inputData:
          items:
            $ref: "#/components/schemas/AutomationInputDataKey"
          type: array
        steps:
          items:
            $ref: "#/components/schemas/AutomationStep"
          type: array
        trigger:
          $ref: "#/components/schemas/AutomationTriggerType"
        type:
          enum:
            - trigger
          type: string
        uniqueKey:
          type: string
      required:
        - steps
        - trigger
        - type
      type: object
    AutomationVersionSchedule:
      properties:
        enterCondition:
          $ref: "#/components/schemas/AutomationCondition"
        exitCondition:
          $ref: "#/components/schemas/AutomationCondition"
        inputData:
          items:
            $ref: "#/components/schemas/AutomationInputDataKey"
          type: array
        schedule:
          type: string
        steps:
          items:
            $ref: "#/components/schemas/AutomationStep"
          type: array
        type:
          enum:
            - schedule
          type: string
      required:
        - schedule
        - steps
        - type
      type: object
    AutomationVersion:
      oneOf:
        - $ref: "#/components/schemas/AutomationVersionTrigger"
        - $ref: "#/components/schemas/AutomationVersionSchedule"
    AzureDevopsAuthorizationPartial:
      properties:
        accountId:
          type: string
      type: object
    AzureDevopsAuthorization:
      properties:
        accountId:
          type: string
        accountName:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        organizationId:
          type: string
        senderEmail:
          type: string
        senderId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
        - senderEmail
        - senderId
      type: object
    BitbucketAuthorizationPartial:
      properties:
        workspaceId:
          type: string
      type: object
    BitbucketAuthorization:
      properties:
        workspaceId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        organizationId:
          type: string
        senderEmail:
          type: string
        senderId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        workspaceName:
          type: string
      required:
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
        - senderEmail
        - senderId
      type: object
    BitbucketServerTokenPartial:
      properties:
        serverUrl:
          type: string
        token:
          type: string
        username:
          type: string
      type: object
    BitbucketServerTokenRequired:
      properties:
        serverUrl:
          type: string
        token:
          type: string
        username:
          type: string
      required:
        - serverUrl
        - token
        - username
      type: object
    BitbucketServerToken:
      properties:
        serverUrl:
          type: string
        token:
          type: string
        username:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        organizationId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - serverUrl
        - token
        - username
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
      type: object
    CatalogNewsArticleTag:
      enum:
        - announcement
        - breaking
        - change
        - deprecate
        - feature
        - fix
        - issue
        - library
        - security
      type: string
    CatalogNewsArticleFilter:
      properties:
        catalogTechnologyId:
          oneOf:
            - type: string
            - items:
                type: string
              type: array
        endAtDate:
          format: date-time
          type: string
        endAtId:
          type: string
        endBeforeDate:
          format: date-time
          type: string
        endBeforeId:
          type: string
        limit:
          type: number
        limitToLast:
          type: number
        order:
          enum:
            - asc
            - desc
          type: string
        startAfterDate:
          format: date-time
          type: string
        startAfterId:
          type: string
        startAtDate:
          format: date-time
          type: string
        startAtId:
          type: string
      type: object
    CatalogNewsArticle:
      properties:
        body:
          type: string
        catalogTechnologyIds:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        defaultSlug:
          type: string
        description:
          type: string
        id:
          type: string
        link:
          type: string
        provider:
          $ref: "#/components/schemas/CatalogProviderNullable"
        publishedAt:
          format: date-time
          type: string
        slugs:
          items:
            type: string
          type: array
        tags:
          items:
            $ref: "#/components/schemas/CatalogNewsArticleTag"
          type: array
        title:
          type: string
      required:
        - body
        - catalogTechnologyIds
        - createdAt
        - defaultSlug
        - description
        - id
        - link
        - provider
        - publishedAt
        - slugs
        - tags
        - title
      type: object
    CatalogProvider:
      enum:
        - aws
        - azure
        - gcp
        - microsoft
        - salesforce
        - atlassian
        - apache
        - supabase
      type: string
    CatalogProviderNullable:
      enum:
        - aws
        - azure
        - gcp
        - microsoft
        - salesforce
        - atlassian
        - apache
        - supabase
        - null
      nullable: true
      type: string
    CatalogTechnologyType:
      enum:
        - provider
        - runtime
        - kubernetes
        - language
        - generic
        - operating-system
        - framework
        - database
        - service
        - library
        - tool
      type: string
    CatalogTechnologyTypeNullable:
      enum:
        - provider
        - runtime
        - kubernetes
        - language
        - generic
        - operating-system
        - framework
        - database
        - service
        - library
        - tool
        - null
      nullable: true
      type: string
    CatalogTechnologyFilter:
      properties:
        isApp:
          type: boolean
        isArea:
          type: boolean
        isComponent:
          type: boolean
        isConnection:
          type: boolean
        isStore:
          type: boolean
        isSystem:
          type: boolean
        provider:
          oneOf:
            - $ref: "#/components/schemas/CatalogProviderNullable"
            - items:
                $ref: "#/components/schemas/CatalogProviderNullable"
              type: array
        type:
          oneOf:
            - $ref: "#/components/schemas/CatalogTechnologyTypeNullable"
            - items:
                $ref: "#/components/schemas/CatalogTechnologyTypeNullable"
              type: array
      type: object
    CatalogTechnology:
      properties:
        awsXmlSelector:
          type: string
        category:
          type: string
        color:
          $ref: "#/components/schemas/TagColor"
        defaultSlug:
          type: string
        deprecatedAt:
          format: date-time
          type: string
        description:
          type: string
        docsUrl:
          type: string
        iconUrl:
          type: string
        iconUrlDark:
          type: string
        iconUrlLight:
          type: string
        id:
          type: string
        isApp:
          type: boolean
        isArea:
          type: boolean
        isComponent:
          type: boolean
        isConnection:
          type: boolean
        isStore:
          type: boolean
        isSystem:
          type: boolean
        name:
          type: string
        nameShort:
          type: string
        provider:
          $ref: "#/components/schemas/CatalogProviderNullable"
        slugs:
          items:
            type: string
          type: array
        type:
          $ref: "#/components/schemas/CatalogTechnologyTypeNullable"
        updatesUrl:
          type: string
        updatesXmlUrl:
          type: string
        websiteUrl:
          type: string
      required:
        - color
        - defaultSlug
        - id
        - isApp
        - isArea
        - isComponent
        - isConnection
        - isStore
        - isSystem
        - name
        - provider
        - slugs
        - type
      type: object
    CodeRepoFilter:
      properties:
        azureDevopsUrl:
          type: string
        bitbucketServerUrl:
          type: string
        bitbucketUrl:
          type: string
        githubUrl:
          type: string
        gitlabUrl:
          type: string
      type: object
    CodeRepoTreeItemType:
      enum:
        - blob
        - tree
      type: string
    CodeRepoTreeItem:
      properties:
        language:
          type: string
        path:
          type: string
        sha:
          type: string
        size:
          type: number
        type:
          $ref: "#/components/schemas/CodeRepoTreeItemType"
      required:
        - path
        - sha
        - type
      type: object
    CodeRepoRefType:
      enum:
        - branch
      type: string
    CodeRepoRef:
      properties:
        id:
          type: string
        name:
          type: string
        sha:
          type: string
        type:
          $ref: "#/components/schemas/CodeRepoRefType"
      required:
        - id
        - name
        - sha
        - type
      type: object
    CodeRepoType:
      enum:
        - azure-devops
        - bitbucket
        - bitbucket-server
        - github
        - gitlab
      type: string
    CodeRepoPartial:
      properties:
        azureDevopsAccountName:
          type: string
        azureDevopsAuthorizationId:
          type: string
        azureDevopsProjectId:
          type: string
        azureDevopsRepositoryId:
          type: string
        azureDevopsUrl:
          type: string
        bitbucketAuthorizationId:
          type: string
        bitbucketProjectId:
          type: string
        bitbucketRepositoryId:
          type: string
        bitbucketServerProjectId:
          type: number
        bitbucketServerProjectKey:
          type: string
        bitbucketServerRepositoryId:
          type: number
        bitbucketServerRepositorySlug:
          type: string
        bitbucketServerTokenId:
          type: string
        bitbucketServerUrl:
          type: string
        bitbucketUrl:
          type: string
        bitbucketWorkspaceId:
          type: string
        githubInstallId:
          type: string
        githubOwnerId:
          type: number
        githubOwnerLogin:
          type: string
        githubRepositoryId:
          type: number
        githubRepositoryName:
          type: string
        githubUrl:
          type: string
        gitlabAuthorizationId:
          type: string
        gitlabGroupId:
          type: number
        gitlabProjectId:
          type: number
        gitlabUrl:
          type: string
        name:
          type: string
        refs:
          additionalProperties:
            $ref: "#/components/schemas/CodeRepoRef"
          type: object
        type:
          $ref: "#/components/schemas/CodeRepoType"
        url:
          type: string
      type: object
    CodeRepoRequired:
      properties:
        azureDevopsAccountName:
          type: string
        azureDevopsAuthorizationId:
          type: string
        azureDevopsProjectId:
          type: string
        azureDevopsRepositoryId:
          type: string
        azureDevopsUrl:
          type: string
        bitbucketAuthorizationId:
          type: string
        bitbucketProjectId:
          type: string
        bitbucketRepositoryId:
          type: string
        bitbucketServerProjectId:
          type: number
        bitbucketServerProjectKey:
          type: string
        bitbucketServerRepositoryId:
          type: number
        bitbucketServerRepositorySlug:
          type: string
        bitbucketServerTokenId:
          type: string
        bitbucketServerUrl:
          type: string
        bitbucketUrl:
          type: string
        bitbucketWorkspaceId:
          type: string
        githubInstallId:
          type: string
        githubOwnerId:
          type: number
        githubOwnerLogin:
          type: string
        githubRepositoryId:
          type: number
        githubRepositoryName:
          type: string
        githubUrl:
          type: string
        gitlabAuthorizationId:
          type: string
        gitlabGroupId:
          type: number
        gitlabProjectId:
          type: number
        gitlabUrl:
          type: string
        name:
          type: string
        refs:
          additionalProperties:
            $ref: "#/components/schemas/CodeRepoRef"
          type: object
        type:
          $ref: "#/components/schemas/CodeRepoType"
        url:
          type: string
      required:
        - name
        - type
        - url
      type: object
    CodeRepo:
      properties:
        azureDevopsAccountName:
          type: string
        azureDevopsAuthorizationId:
          type: string
        azureDevopsProjectId:
          type: string
        azureDevopsRepositoryId:
          type: string
        azureDevopsUrl:
          type: string
        bitbucketAuthorizationId:
          type: string
        bitbucketProjectId:
          type: string
        bitbucketRepositoryId:
          type: string
        bitbucketServerProjectId:
          type: number
        bitbucketServerProjectKey:
          type: string
        bitbucketServerRepositoryId:
          type: number
        bitbucketServerRepositorySlug:
          type: string
        bitbucketServerTokenId:
          type: string
        bitbucketServerUrl:
          type: string
        bitbucketUrl:
          type: string
        bitbucketWorkspaceId:
          type: string
        githubInstallId:
          type: string
        githubOwnerId:
          type: number
        githubOwnerLogin:
          type: string
        githubRepositoryId:
          type: number
        githubRepositoryName:
          type: string
        githubUrl:
          type: string
        gitlabAuthorizationId:
          type: string
        gitlabGroupId:
          type: number
        gitlabProjectId:
          type: number
        gitlabUrl:
          type: string
        name:
          type: string
        refs:
          additionalProperties:
            $ref: "#/components/schemas/CodeRepoRef"
          type: object
        type:
          $ref: "#/components/schemas/CodeRepoType"
        url:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        organizationId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - name
        - type
        - url
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
        - refs
      type: object
    CodeRepoLinkType:
      enum:
        - azure-devops-branch
        - azure-devops-file
        - azure-devops-folder
        - azure-devops-repo
        - bitbucket-branch
        - bitbucket-file
        - bitbucket-folder
        - bitbucket-repo
        - bitbucket-server-branch
        - bitbucket-server-file
        - bitbucket-server-folder
        - bitbucket-server-repo
        - github-branch
        - github-file
        - github-folder
        - github-repo
        - gitlab-branch
        - gitlab-file
        - gitlab-folder
        - gitlab-repo
      type: string
    CodeRepoLinkStatus:
      enum:
        - valid
        - invalid
      type: string
    CodeRepoLinkTechnologyType:
      enum:
        - programming
        - data
        - markup
        - prose
      type: string
    CodeRepoLinkTechnology:
      properties:
        color:
          type: string
        count:
          type: number
        name:
          type: string
        size:
          type: number
        type:
          $ref: "#/components/schemas/CodeRepoLinkTechnologyType"
      required:
        - count
        - name
        - size
        - type
      type: object
    CodeRepoLinkAzureDevopsRepo:
      properties:
        accountName:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - azure-devops-repo
          type: string
      required:
        - accountName
        - projectId
        - repositoryId
        - type
      type: object
    CodeRepoLinkAzureDevopsBranch:
      properties:
        accountName:
          type: string
        branchName:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - azure-devops-branch
          type: string
      required:
        - accountName
        - branchName
        - projectId
        - repositoryId
        - type
      type: object
    CodeRepoLinkAzureDevopsFolder:
      properties:
        accountName:
          type: string
        branchName:
          type: string
        path:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - azure-devops-folder
          type: string
      required:
        - accountName
        - branchName
        - path
        - projectId
        - repositoryId
        - type
      type: object
    CodeRepoLinkAzureDevopsFile:
      properties:
        accountName:
          type: string
        branchName:
          type: string
        path:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - azure-devops-file
          type: string
      required:
        - accountName
        - branchName
        - path
        - projectId
        - repositoryId
        - type
      type: object
    CodeRepoLinkBitbucketRepo:
      properties:
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - bitbucket-repo
          type: string
        workspaceId:
          type: string
      required:
        - projectId
        - repositoryId
        - type
        - workspaceId
      type: object
    CodeRepoLinkBitbucketBranch:
      properties:
        branchName:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - bitbucket-branch
          type: string
        workspaceId:
          type: string
      required:
        - branchName
        - projectId
        - repositoryId
        - type
        - workspaceId
      type: object
    CodeRepoLinkBitbucketFolder:
      properties:
        branchName:
          type: string
        path:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - bitbucket-folder
          type: string
        workspaceId:
          type: string
      required:
        - branchName
        - path
        - projectId
        - repositoryId
        - type
        - workspaceId
      type: object
    CodeRepoLinkBitbucketFile:
      properties:
        branchName:
          type: string
        path:
          type: string
        projectId:
          type: string
        repositoryId:
          type: string
        type:
          enum:
            - bitbucket-file
          type: string
        workspaceId:
          type: string
      required:
        - branchName
        - path
        - projectId
        - repositoryId
        - type
        - workspaceId
      type: object
    CodeRepoLinkBitbucketServerRepo:
      properties:
        projectId:
          type: number
        repositoryId:
          type: number
        serverUrl:
          type: string
        type:
          enum:
            - bitbucket-server-repo
          type: string
      required:
        - projectId
        - repositoryId
        - serverUrl
        - type
      type: object
    CodeRepoLinkBitbucketServerBranch:
      properties:
        branchName:
          type: string
        projectId:
          type: number
        repositoryId:
          type: number
        serverUrl:
          type: string
        type:
          enum:
            - bitbucket-server-branch
          type: string
      required:
        - branchName
        - projectId
        - repositoryId
        - serverUrl
        - type
      type: object
    CodeRepoLinkBitbucketServerFolder:
      properties:
        branchName:
          type: string
        path:
          type: string
        projectId:
          type: number
        repositoryId:
          type: number
        serverUrl:
          type: string
        type:
          enum:
            - bitbucket-server-folder
          type: string
      required:
        - branchName
        - path
        - projectId
        - repositoryId
        - serverUrl
        - type
      type: object
    CodeRepoLinkBitbucketServerFile:
      properties:
        branchName:
          type: string
        path:
          type: string
        projectId:
          type: number
        repositoryId:
          type: number
        serverUrl:
          type: string
        type:
          enum:
            - bitbucket-server-file
          type: string
      required:
        - branchName
        - path
        - projectId
        - repositoryId
        - serverUrl
        - type
      type: object
    CodeRepoLinkGithubRepo:
      properties:
        ownerId:
          type: number
        repositoryId:
          type: number
        type:
          enum:
            - github-repo
          type: string
      required:
        - ownerId
        - repositoryId
        - type
      type: object
    CodeRepoLinkGithubBranch:
      properties:
        branchName:
          type: string
        ownerId:
          type: number
        repositoryId:
          type: number
        type:
          enum:
            - github-branch
          type: string
      required:
        - branchName
        - ownerId
        - repositoryId
        - type
      type: object
    CodeRepoLinkGithubFolder:
      properties:
        branchName:
          type: string
        ownerId:
          type: number
        path:
          type: string
        repositoryId:
          type: number
        type:
          enum:
            - github-folder
          type: string
      required:
        - branchName
        - ownerId
        - path
        - repositoryId
        - type
      type: object
    CodeRepoLinkGithubFile:
      properties:
        branchName:
          type: string
        ownerId:
          type: number
        path:
          type: string
        repositoryId:
          type: number
        type:
          enum:
            - github-file
          type: string
      required:
        - branchName
        - ownerId
        - path
        - repositoryId
        - type
      type: object
    CodeRepoLinkGitlabRepo:
      properties:
        groupId:
          type: number
        projectId:
          type: number
        type:
          enum:
            - gitlab-repo
          type: string
      required:
        - groupId
        - projectId
        - type
      type: object
    CodeRepoLinkGitlabBranch:
      properties:
        branchName:
          type: string
        groupId:
          type: number
        projectId:
          type: number
        type:
          enum:
            - gitlab-branch
          type: string
      required:
        - branchName
        - groupId
        - projectId
        - type
      type: object
    CodeRepoLinkGitlabFolder:
      properties:
        branchName:
          type: string
        groupId:
          type: number
        path:
          type: string
        projectId:
          type: number
        type:
          enum:
            - gitlab-folder
          type: string
      required:
        - branchName
        - groupId
        - path
        - projectId
        - type
      type: object
    CodeRepoLinkGitlabFile:
      properties:
        branchName:
          type: string
        groupId:
          type: number
        path:
          type: string
        projectId:
          type: number
        type:
          enum:
            - gitlab-file
          type: string
      required:
        - groupId
        - branchName
        - path
        - projectId
        - type
      type: object
    CodeRepoLinkRepo:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsRepo"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketRepo"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerRepo"
        - $ref: "#/components/schemas/CodeRepoLinkGithubRepo"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabRepo"
    CodeRepoLinkBranch:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsBranch"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketBranch"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerBranch"
        - $ref: "#/components/schemas/CodeRepoLinkGithubBranch"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabBranch"
    CodeRepoLinkFolder:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsFolder"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketFolder"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerFolder"
        - $ref: "#/components/schemas/CodeRepoLinkGithubFolder"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabFolder"
    CodeRepoLinkFile:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsFile"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketFile"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerFile"
        - $ref: "#/components/schemas/CodeRepoLinkGithubFile"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabFile"
    CodeRepoLinkAzureDevops:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsRepo"
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsBranch"
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsFolder"
        - $ref: "#/components/schemas/CodeRepoLinkAzureDevopsFile"
    CodeRepoLinkBitbucket:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketRepo"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketBranch"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketFolder"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketFile"
    CodeRepoLinkBitbucketServer:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerRepo"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerBranch"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerFolder"
        - $ref: "#/components/schemas/CodeRepoLinkBitbucketServerFile"
    CodeRepoLinkGithub:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkGithubRepo"
        - $ref: "#/components/schemas/CodeRepoLinkGithubBranch"
        - $ref: "#/components/schemas/CodeRepoLinkGithubFolder"
        - $ref: "#/components/schemas/CodeRepoLinkGithubFile"
    CodeRepoLinkGitlab:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkGitlabRepo"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabBranch"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabFolder"
        - $ref: "#/components/schemas/CodeRepoLinkGitlabFile"
    CodeRepoLinkCommonPartial:
      properties:
        customName:
          type: string
        id:
          type: string
        index:
          type: number
        name:
          type: string
        status:
          $ref: "#/components/schemas/CodeRepoLinkStatus"
        technologies:
          items:
            $ref: "#/components/schemas/CodeRepoLinkTechnology"
          type: array
        url:
          type: string
      type: object
    CodeRepoLinkCommon:
      properties:
        customName:
          type: string
        id:
          type: string
        index:
          type: number
        name:
          type: string
        status:
          $ref: "#/components/schemas/CodeRepoLinkStatus"
        technologies:
          items:
            $ref: "#/components/schemas/CodeRepoLinkTechnology"
          type: array
        url:
          type: string
      required:
        - id
        - index
        - name
        - status
        - technologies
        - url
      type: object
    CodeRepoLinkPartial:
      allOf:
        - $ref: "#/components/schemas/CodeRepoLinkCommonPartial"
        - oneOf:
            - $ref: "#/components/schemas/CodeRepoLinkAzureDevops"
            - $ref: "#/components/schemas/CodeRepoLinkBitbucket"
            - $ref: "#/components/schemas/CodeRepoLinkBitbucketServer"
            - $ref: "#/components/schemas/CodeRepoLinkGithub"
            - $ref: "#/components/schemas/CodeRepoLinkGitlab"
    CodeRepoLink:
      allOf:
        - $ref: "#/components/schemas/CodeRepoLinkCommon"
        - oneOf:
            - $ref: "#/components/schemas/CodeRepoLinkAzureDevops"
            - $ref: "#/components/schemas/CodeRepoLinkBitbucket"
            - $ref: "#/components/schemas/CodeRepoLinkBitbucketServer"
            - $ref: "#/components/schemas/CodeRepoLinkGithub"
            - $ref: "#/components/schemas/CodeRepoLinkGitlab"
    CommentPartial:
      properties:
        body:
          $ref: "#/components/schemas/CommentBody"
        commit:
          type: number
        mentionedUserIds:
          items:
            type: string
          type: array
        target:
          $ref: "#/components/schemas/CommentTarget"
      type: object
    CommentRequired:
      properties:
        body:
          $ref: "#/components/schemas/CommentBody"
        commit:
          type: number
        mentionedUserIds:
          items:
            type: string
          type: array
        target:
          $ref: "#/components/schemas/CommentTarget"
        handleId:
          type: string
      required:
        - body
        - target
      type: object
    Comment:
      properties:
        body:
          $ref: "#/components/schemas/CommentBody"
        commit:
          type: number
        mentionedUserIds:
          items:
            type: string
          type: array
        target:
          $ref: "#/components/schemas/CommentTarget"
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        replyCount:
          type: number
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - body
        - target
        - commit
        - createdAt
        - createdBy
        - createdById
        - handleId
        - id
        - landscapeId
        - mentionedUserIds
        - replyCount
        - version
        - versionId
      type: object
    CommentBodyType:
      enum:
        - idea
        - inaccurate
        - new-idea
        - new-inaccurate
        - new-question
        - question
      type: string
    CommentBodyStatus:
      enum:
        - active
        - create
        - dismissed
        - open
        - resolved
      type: string
    CommentBodyNewIdea:
      properties:
        content:
          type: string
        showContentPreview:
          type: boolean
        status:
          enum:
            - create
          type: string
        type:
          enum:
            - new-idea
          type: string
      required:
        - type
        - status
        - content
      type: object
    CommentBodyNewQuestion:
      properties:
        content:
          type: string
        showContentPreview:
          type: boolean
        status:
          enum:
            - create
          type: string
        type:
          enum:
            - new-question
          type: string
      required:
        - type
        - status
        - content
      type: object
    CommentBodyNewInaccuracy:
      properties:
        content:
          type: string
        showContentPreview:
          type: boolean
        status:
          enum:
            - create
          type: string
        type:
          enum:
            - new-inaccurate
          type: string
      required:
        - type
        - status
        - content
      type: object
    CommentBodyQuestion:
      properties:
        content:
          type: string
        showContentPreview:
          type: boolean
        status:
          enum:
            - open
            - resolved
          type: string
        type:
          enum:
            - question
          type: string
      required:
        - type
        - status
        - content
      type: object
    CommentBodyInaccuracy:
      properties:
        content:
          type: string
        showContentPreview:
          type: boolean
        status:
          enum:
            - open
            - resolved
          type: string
        type:
          enum:
            - inaccurate
          type: string
      required:
        - type
        - status
        - content
      type: object
    CommentBodyIdea:
      properties:
        content:
          type: string
        showContentPreview:
          type: boolean
        status:
          enum:
            - active
            - dismissed
          type: string
        type:
          enum:
            - idea
          type: string
      required:
        - type
        - status
        - content
      type: object
    CommentBody:
      oneOf:
        - $ref: "#/components/schemas/CommentBodyQuestion"
        - $ref: "#/components/schemas/CommentBodyInaccuracy"
        - $ref: "#/components/schemas/CommentBodyIdea"
        - $ref: "#/components/schemas/CommentBodyNewQuestion"
        - $ref: "#/components/schemas/CommentBodyNewInaccuracy"
        - $ref: "#/components/schemas/CommentBodyNewIdea"
    CommentReplyPartial:
      properties:
        content:
          minimum: 1
          type: string
        mentionedUserIds:
          items:
            type: string
          type: array
      type: object
    CommentReplyRequired:
      properties:
        content:
          minimum: 1
          type: string
        mentionedUserIds:
          items:
            type: string
          type: array
      required:
        - content
      type: object
    CommentReply:
      properties:
        content:
          minimum: 1
          type: string
        mentionedUserIds:
          items:
            type: string
          type: array
        commentId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        versionId:
          type: string
      required:
        - content
        - commentId
        - createdAt
        - createdBy
        - createdById
        - id
        - landscapeId
        - mentionedUserIds
        - versionId
      type: object
    CommentTargetType:
      enum:
        - diagram
      type: string
    CommentTargetDiagram:
      properties:
        id:
          type: string
        type:
          enum:
            - diagram
          type: string
        x:
          type: number
        y:
          type: number
      required:
        - type
        - id
        - x
        - y
      type: object
    CommentTarget:
      oneOf:
        - $ref: "#/components/schemas/CommentTargetDiagram"
    ContactRequired:
      properties:
        body:
          $ref: "#/components/schemas/ContactBody"
        email:
          format: email
          type: string
        landscapeId:
          type: string
        name:
          type: string
        organizationId:
          type: string
        url:
          type: string
        userId:
          type: string
      required:
        - body
        - email
      type: object
    Contact:
      properties:
        body:
          $ref: "#/components/schemas/ContactBody"
        email:
          format: email
          type: string
        landscapeId:
          type: string
        name:
          type: string
        organizationId:
          type: string
        url:
          type: string
        userId:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
      required:
        - body
        - email
        - createdAt
        - id
      type: object
    ContactType:
      enum:
        - data-deletion-request
        - embed-tool-request
        - general
        - organization-deleted
        - sales
        - sso-saml-registration
        - subject-access-request
        - support
        - technology-request
      type: string
    ContactAttachment:
      properties:
        data:
          type: string
        filename:
          type: string
      required:
        - data
        - filename
      type: object
    ContactBodyDataDeletionRequest:
      properties:
        message:
          type: string
        type:
          enum:
            - data-deletion-request
          type: string
      required:
        - message
        - type
      type: object
    ContactBodyEmbedToolRequest:
      properties:
        toolName:
          type: string
        type:
          enum:
            - embed-tool-request
          type: string
      required:
        - toolName
        - type
      type: object
    ContactBodyGeneral:
      properties:
        feeling:
          type: string
        message:
          type: string
        subject:
          type: string
        type:
          enum:
            - general
          type: string
      required:
        - message
        - subject
        - type
      type: object
    ContactBodyOrganizationDeleted:
      properties:
        organizationName:
          type: string
        reason:
          type: string
        type:
          enum:
            - organization-deleted
          type: string
      required:
        - organizationName
        - reason
        - type
      type: object
    ContactBodySales:
      properties:
        feeling:
          type: string
        message:
          type: string
        subject:
          type: string
        type:
          enum:
            - sales
          type: string
      required:
        - message
        - subject
        - type
      type: object
    ContactBodySSOSamlRegistration:
      properties:
        certificate:
          type: string
        companyDomain:
          type: string
        entityId:
          type: string
        ssoUrl:
          type: string
        type:
          enum:
            - sso-saml-registration
          type: string
      required:
        - certificate
        - companyDomain
        - entityId
        - ssoUrl
        - type
      type: object
    ContactBodySubjectAccessRequest:
      properties:
        message:
          type: string
        type:
          enum:
            - subject-access-request
          type: string
      required:
        - message
        - type
      type: object
    ContactBodySupport:
      properties:
        attachments:
          items:
            $ref: "#/components/schemas/ContactAttachment"
          type: array
        feeling:
          type: string
        message:
          type: string
        subject:
          type: string
        type:
          enum:
            - support
          type: string
      required:
        - message
        - subject
        - type
      type: object
    ContactTechnologyRequest:
      properties:
        docsUrl:
          type: string
        searchTerm:
          type: string
        technologyName:
          type: string
        type:
          enum:
            - technology-request
          type: string
        updatesUrl:
          type: string
        websiteUrl:
          type: string
      required:
        - searchTerm
        - technologyName
        - type
        - websiteUrl
      type: object
    ContactBody:
      oneOf:
        - $ref: "#/components/schemas/ContactBodyDataDeletionRequest"
        - $ref: "#/components/schemas/ContactBodyEmbedToolRequest"
        - $ref: "#/components/schemas/ContactBodyGeneral"
        - $ref: "#/components/schemas/ContactBodyOrganizationDeleted"
        - $ref: "#/components/schemas/ContactBodySales"
        - $ref: "#/components/schemas/ContactBodySSOSamlRegistration"
        - $ref: "#/components/schemas/ContactBodySubjectAccessRequest"
        - $ref: "#/components/schemas/ContactBodySupport"
        - $ref: "#/components/schemas/ContactTechnologyRequest"
    DiagramExportPngOptions:
      properties:
        email:
          format: email
          type: string
        filename:
          type: string
        flowId:
          type: string
        flowPathIds:
          items:
            type: string
          nullable: true
          type: array
        name:
          type: string
        organizationId:
          type: string
        overlayGroupId:
          nullable: true
          type: string
        overlayIdsFocused:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsHidden:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsPinned:
          items:
            type: string
          nullable: true
          type: array
        theme:
          $ref: "#/components/schemas/Theme"
      type: object
    DiagramAction:
      enum:
        - initial-load
        - load
        - zoom
      type: string
    DiagramFilter:
      properties:
        domainId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/DiagramStatus"
        type:
          oneOf:
            - $ref: "#/components/schemas/DiagramType"
            - items:
                $ref: "#/components/schemas/DiagramType"
              type: array
      type: object
    DiagramThumbnail:
      properties:
        createdAt:
          format: date-time
          type: string
        expires:
          format: date-time
          type: string
        id:
          type: string
        index:
          type: number
        modelId:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
        updatedAt:
          format: date-time
          type: string
        url:
          format: uri
          type: string
      required:
        - createdAt
        - expires
        - id
        - index
        - modelId
        - name
        - type
        - url
      type: object
    DiagramType:
      enum:
        - context-diagram
        - app-diagram
        - component-diagram
      type: string
    DiagramStatus:
      enum:
        - current
        - draft
      type: string
    DiagramPartial:
      properties:
        commit:
          type: number
        description:
          type: string
        groupId:
          nullable: true
          type: string
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/DiagramStatus"
      type: object
    DiagramRequired:
      properties:
        commit:
          type: number
        description:
          type: string
        groupId:
          nullable: true
          type: string
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/DiagramStatus"
        handleId:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
      required:
        - index
        - modelId
        - name
        - type
      type: object
    Diagram:
      properties:
        commit:
          type: number
        description:
          type: string
        groupId:
          nullable: true
          type: string
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/DiagramStatus"
        handleId:
          type: string
        type:
          $ref: "#/components/schemas/DiagramType"
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - index
        - modelId
        - name
        - type
        - commit
        - createdAt
        - createdBy
        - createdById
        - description
        - groupId
        - handleId
        - id
        - labels
        - landscapeId
        - parentId
        - status
        - version
        - versionId
      type: object
    DiagramObjectType:
      enum:
        - actor
        - app
        - area
        - component
        - container
        - store
        - system
      type: string
    DiagramObjectConnector:
      enum:
        - top-left
        - top-center
        - top-right
        - right-top
        - right-middle
        - right-bottom
        - bottom-right
        - bottom-center
        - bottom-left
        - left-bottom
        - left-middle
        - left-top
      nullable: true
      type: string
    DiagramObjectPartial:
      properties:
        height:
          type: number
        id:
          type: string
        modelId:
          type: string
        type:
          $ref: "#/components/schemas/DiagramObjectType"
        width:
          type: number
        x:
          type: number
        y:
          type: number
      type: object
    DiagramObject:
      properties:
        height:
          type: number
        id:
          type: string
        modelId:
          type: string
        type:
          $ref: "#/components/schemas/DiagramObjectType"
        width:
          type: number
        x:
          type: number
        y:
          type: number
      required:
        - height
        - id
        - modelId
        - type
        - width
        - x
        - y
      type: object
    DiagramConnectionLineShape:
      enum:
        - curved
        - straight
        - square
      type: string
    DiagramConnectionPartial:
      properties:
        id:
          type: string
        labelPosition:
          type: number
        lineShape:
          $ref: "#/components/schemas/DiagramConnectionLineShape"
        modelId:
          nullable: true
          type: string
        originConnector:
          $ref: "#/components/schemas/DiagramObjectConnector"
        originId:
          nullable: true
          type: string
        points:
          items:
            properties:
              x:
                type: number
              y:
                type: number
            required:
              - x
              - y
            type: object
          type: array
        targetConnector:
          $ref: "#/components/schemas/DiagramObjectConnector"
        targetId:
          nullable: true
          type: string
      type: object
    DiagramConnection:
      properties:
        id:
          type: string
        labelPosition:
          type: number
        lineShape:
          $ref: "#/components/schemas/DiagramConnectionLineShape"
        modelId:
          nullable: true
          type: string
        originConnector:
          $ref: "#/components/schemas/DiagramObjectConnector"
        originId:
          nullable: true
          type: string
        points:
          items:
            properties:
              x:
                type: number
              y:
                type: number
            required:
              - x
              - y
            type: object
          type: array
        targetConnector:
          $ref: "#/components/schemas/DiagramObjectConnector"
        targetId:
          nullable: true
          type: string
      required:
        - id
        - labelPosition
        - lineShape
        - modelId
        - originConnector
        - originId
        - points
        - targetConnector
        - targetId
      type: object
    DiagramContentPartial:
      properties:
        commit:
          type: number
        connections:
          properties:
            $add:
              additionalProperties:
                $ref: "#/components/schemas/DiagramConnection"
              type: object
            $remove:
              items:
                type: string
              type: array
            $replace:
              additionalProperties:
                $ref: "#/components/schemas/DiagramConnection"
              type: object
            $update:
              additionalProperties:
                $ref: "#/components/schemas/DiagramConnectionPartial"
              type: object
          type: object
        objects:
          properties:
            $add:
              additionalProperties:
                $ref: "#/components/schemas/DiagramObject"
              type: object
            $remove:
              items:
                type: string
              type: array
            $replace:
              additionalProperties:
                $ref: "#/components/schemas/DiagramObject"
              type: object
            $update:
              additionalProperties:
                $ref: "#/components/schemas/DiagramObjectPartial"
              type: object
          type: object
        tasksProposed:
          properties:
            $append:
              $ref: "#/components/schemas/TaskList"
            $replace:
              $ref: "#/components/schemas/TaskList"
          type: object
      type: object
    DiagramContentRequired:
      properties:
        commit:
          type: number
        connections:
          additionalProperties:
            $ref: "#/components/schemas/DiagramConnection"
          type: object
        objects:
          additionalProperties:
            $ref: "#/components/schemas/DiagramObject"
          type: object
        tasksProposed:
          $ref: "#/components/schemas/TaskList"
      type: object
    DiagramContent:
      properties:
        commit:
          type: number
        connections:
          additionalProperties:
            $ref: "#/components/schemas/DiagramConnection"
          type: object
        objects:
          additionalProperties:
            $ref: "#/components/schemas/DiagramObject"
          type: object
        tasksProposed:
          items:
            $ref: "#/components/schemas/TaskProposed"
          type: array
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        groupId:
          nullable: true
          type: string
        handleId:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        modelId:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/DiagramStatus"
        type:
          $ref: "#/components/schemas/DiagramType"
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
        viewedAt:
          format: date-time
          type: string
        viewedBy:
          $ref: "#/components/schemas/AuthType"
        viewedById:
          type: string
      required:
        - commit
        - connections
        - createdAt
        - createdBy
        - createdById
        - groupId
        - handleId
        - id
        - landscapeId
        - modelId
        - name
        - objects
        - status
        - tasksProposed
        - type
        - version
        - versionId
      type: object
    DiagramGroupFilter:
      properties:
        domainId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
      type: object
    DiagramGroupPartial:
      properties:
        commit:
          type: number
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
      type: object
    DiagramGroupRequired:
      properties:
        commit:
          type: number
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
        handleId:
          type: string
      required:
        - index
        - modelId
        - name
      type: object
    DiagramGroup:
      properties:
        commit:
          type: number
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        modelId:
          type: string
        name:
          type: string
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - index
        - modelId
        - name
        - commit
        - createdAt
        - createdBy
        - createdById
        - handleId
        - id
        - labels
        - landscapeId
        - version
        - versionId
      type: object
    DomainFilter:
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    DomainPartial:
      properties:
        commit:
          type: number
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        subscriptionUserIds:
          items:
            type: string
          type: array
      type: object
    DomainRequired:
      properties:
        commit:
          type: number
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        subscriptionUserIds:
          items:
            type: string
          type: array
        handleId:
          type: string
      required:
        - name
      type: object
    Domain:
      properties:
        commit:
          type: number
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        subscriptionUserIds:
          items:
            type: string
          type: array
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - name
        - commit
        - createdAt
        - createdBy
        - createdById
        - handleId
        - id
        - index
        - labels
        - landscapeId
        - subscriptionUserIds
        - version
        - versionId
      type: object
    FlowFilter:
      properties:
        diagramId:
          type: string
        domainId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    FlowThumbnail:
      properties:
        createdAt:
          format: date-time
          type: string
        diagramId:
          type: string
        expires:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        url:
          format: uri
          type: string
      required:
        - createdAt
        - diagramId
        - expires
        - id
        - name
        - url
      type: object
    FlowStepType:
      enum:
        - alternate-path
        - outgoing
        - parallel-path
        - reply
        - self-action
      type: string
    FlowStepPartial:
      properties:
        description:
          type: string
        id:
          type: string
        index:
          type: number
        originId:
          nullable: true
          type: string
        pathId:
          nullable: true
          type: string
        pathIndex:
          nullable: true
          type: number
        targetId:
          nullable: true
          type: string
        type:
          enum:
            - alternate-path
            - outgoing
            - parallel-path
            - reply
            - self-action
            - null
          nullable: true
          type: string
        viaId:
          nullable: true
          type: string
      type: object
    FlowStep:
      properties:
        description:
          type: string
        id:
          type: string
        index:
          type: number
        originId:
          nullable: true
          type: string
        pathId:
          nullable: true
          type: string
        pathIndex:
          nullable: true
          type: number
        targetId:
          nullable: true
          type: string
        type:
          enum:
            - alternate-path
            - outgoing
            - parallel-path
            - reply
            - self-action
            - null
          nullable: true
          type: string
        viaId:
          nullable: true
          type: string
      required:
        - description
        - id
        - index
        - originId
        - pathId
        - pathIndex
        - targetId
        - type
        - viaId
      type: object
    FlowPartial:
      properties:
        commit:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        showConnectionNames:
          type: boolean
        steps:
          properties:
            $add:
              additionalProperties:
                $ref: "#/components/schemas/FlowStep"
              type: object
            $remove:
              items:
                type: string
              type: array
            $replace:
              additionalProperties:
                $ref: "#/components/schemas/FlowStep"
              type: object
            $update:
              additionalProperties:
                $ref: "#/components/schemas/FlowStepPartial"
              type: object
          type: object
      type: object
    FlowRequired:
      properties:
        commit:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        showConnectionNames:
          type: boolean
        steps:
          additionalProperties:
            $ref: "#/components/schemas/FlowStep"
          type: object
        diagramId:
          type: string
        handleId:
          type: string
      required:
        - diagramId
        - name
      type: object
    Flow:
      properties:
        commit:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        showConnectionNames:
          type: boolean
        steps:
          additionalProperties:
            $ref: "#/components/schemas/FlowStep"
          type: object
        diagramId:
          type: string
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - diagramId
        - name
        - commit
        - createdAt
        - createdBy
        - createdById
        - handleId
        - id
        - labels
        - landscapeId
        - showConnectionNames
        - steps
        - version
        - versionId
      type: object
    GithubInstallType:
      enum:
        - bot
        - user
        - organization
      type: string
    GithubInstall:
      properties:
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        githubId:
          type: number
        id:
          type: string
        organizationId:
          type: string
        ownerId:
          type: number
        ownerLogin:
          type: string
        ownerType:
          $ref: "#/components/schemas/GithubInstallType"
        senderId:
          type: number
        senderLogin:
          type: string
        senderType:
          $ref: "#/components/schemas/GithubInstallType"
        updatedAt:
          format: date-time
          type: string
      required:
        - createdAt
        - createdBy
        - createdById
        - githubId
        - id
        - organizationId
        - ownerId
        - ownerLogin
        - ownerType
        - senderId
        - senderLogin
        - senderType
      type: object
    GitlabAuthorizationPartial:
      properties:
        groupId:
          type: number
      type: object
    GitlabAuthorization:
      properties:
        groupId:
          type: number
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        groupName:
          type: string
        id:
          type: string
        organizationId:
          type: string
        senderId:
          type: number
        senderUsername:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
        - senderUsername
        - senderId
      type: object
    LandscapePartial:
      properties:
        name:
          type: string
        organizationId:
          type: string
      type: object
    LandscapeRequired:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    Landscape:
      properties:
        name:
          type: string
        organizationId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - name
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
      type: object
    LandscapeNullable:
      allOf:
        - properties:
            name:
              type: string
            organizationId:
              type: string
            createdAt:
              format: date-time
              type: string
            createdBy:
              $ref: "#/components/schemas/AuthType"
            createdById:
              type: string
            id:
              type: string
            updatedAt:
              format: date-time
              type: string
            updatedBy:
              $ref: "#/components/schemas/AuthType"
            updatedById:
              type: string
          required:
            - name
            - createdAt
            - createdBy
            - createdById
            - id
            - organizationId
          type: object
          nullable: true
    LandscapeTemplatePartial:
      properties:
        landscapeId:
          type: string
        name:
          type: string
        order:
          type: number
      type: object
    LandscapeTemplateRequired:
      properties:
        landscapeId:
          type: string
        name:
          type: string
        order:
          type: number
      required:
        - name
        - order
        - landscapeId
      type: object
    LandscapeTemplate:
      properties:
        landscapeId:
          type: string
        name:
          type: string
        order:
          type: number
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - name
        - order
        - landscapeId
        - createdAt
        - id
      type: object
    ModelConnectionFilter:
      properties:
        direction:
          $ref: "#/components/schemas/ModelConnectionDirection"
        domainId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        originId:
          oneOf:
            - type: string
            - items:
                type: string
              type: array
        status:
          oneOf:
            - $ref: "#/components/schemas/ModelConnectionStatus"
            - items:
                $ref: "#/components/schemas/ModelConnectionStatus"
              type: array
        targetId:
          oneOf:
            - type: string
            - items:
                type: string
              type: array
      type: object
    ModelConnectionDirection:
      enum:
        - null
        - outgoing
        - bidirectional
      nullable: true
      type: string
    ModelConnectionStatus:
      enum:
        - live
        - future
        - deprecated
        - removed
      type: string
    ModelConnectionTechnology:
      properties:
        color:
          $ref: "#/components/schemas/TagColor"
        iconUrl:
          type: string
        iconUrlDark:
          type: string
        iconUrlLight:
          type: string
        id:
          type: string
        index:
          type: number
        name:
          type: string
        nameShort:
          type: string
        provider:
          $ref: "#/components/schemas/CatalogProviderNullable"
        type:
          $ref: "#/components/schemas/CatalogTechnologyTypeNullable"
      required:
        - color
        - id
        - index
        - name
        - provider
        - type
      type: object
    ModelConnectionDiagram:
      properties:
        connectionId:
          type: string
        id:
          type: string
        originModelId:
          type: string
        targetModelId:
          type: string
      required:
        - connectionId
        - id
        - originModelId
        - targetModelId
      type: object
    ModelConnectionFlow:
      properties:
        id:
          type: string
        stepId:
          type: string
      required:
        - id
        - stepId
      type: object
    ModelConnectionPartial:
      properties:
        commit:
          type: number
        description:
          type: string
        direction:
          $ref: "#/components/schemas/ModelConnectionDirection"
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        originId:
          type: string
        status:
          $ref: "#/components/schemas/ModelConnectionStatus"
        tagIds:
          items:
            type: string
          type: array
        targetId:
          type: string
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelConnectionTechnology"
          type: object
      type: object
    ModelConnectionRequired:
      properties:
        commit:
          type: number
        description:
          type: string
        direction:
          $ref: "#/components/schemas/ModelConnectionDirection"
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        originId:
          type: string
        status:
          $ref: "#/components/schemas/ModelConnectionStatus"
        tagIds:
          items:
            type: string
          type: array
        targetId:
          type: string
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelConnectionTechnology"
          type: object
        handleId:
          type: string
      required:
        - direction
        - name
        - originId
        - targetId
      type: object
    ModelConnection:
      properties:
        commit:
          type: number
        description:
          type: string
        direction:
          $ref: "#/components/schemas/ModelConnectionDirection"
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        originId:
          type: string
        status:
          $ref: "#/components/schemas/ModelConnectionStatus"
        tagIds:
          items:
            type: string
          type: array
        targetId:
          type: string
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelConnectionTechnology"
          type: object
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        diagrams:
          additionalProperties:
            $ref: "#/components/schemas/ModelConnectionDiagram"
          type: object
        flows:
          additionalProperties:
            $ref: "#/components/schemas/ModelConnectionFlow"
          type: object
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - direction
        - name
        - originId
        - targetId
        - commit
        - createdAt
        - createdBy
        - createdById
        - diagrams
        - flows
        - handleId
        - id
        - labels
        - landscapeId
        - status
        - tagIds
        - technologies
        - version
        - versionId
      type: object
    ModelObjectFilter:
      properties:
        domainId:
          type: string
        external:
          type: boolean
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          oneOf:
            - $ref: "#/components/schemas/ModelObjectStatus"
            - items:
                $ref: "#/components/schemas/ModelObjectStatus"
              type: array
        type:
          oneOf:
            - $ref: "#/components/schemas/ModelObjectType"
            - items:
                $ref: "#/components/schemas/ModelObjectType"
              type: array
      type: object
    ModelObjectType:
      enum:
        - root
        - actor
        - system
        - app
        - store
        - component
        - area
      type: string
    ModelObjectStatus:
      enum:
        - live
        - future
        - deprecated
        - removed
      type: string
    ModelObjectIcon:
      properties:
        catalogTechnologyId:
          type: string
        name:
          type: string
        url:
          type: string
        urlDark:
          type: string
        urlLight:
          type: string
      required:
        - catalogTechnologyId
        - name
      type: object
    ModelObjectIconNullable:
      allOf:
        - properties:
            catalogTechnologyId:
              type: string
            name:
              type: string
            url:
              type: string
            urlDark:
              type: string
            urlLight:
              type: string
          required:
            - catalogTechnologyId
            - name
          type: object
          nullable: true
    ModelObjectTechnology:
      properties:
        color:
          $ref: "#/components/schemas/TagColor"
        iconUrl:
          type: string
        iconUrlDark:
          type: string
        iconUrlLight:
          type: string
        id:
          type: string
        index:
          type: number
        name:
          type: string
        nameShort:
          type: string
        provider:
          $ref: "#/components/schemas/CatalogProviderNullable"
        type:
          $ref: "#/components/schemas/CatalogTechnologyTypeNullable"
      required:
        - color
        - id
        - index
        - name
        - provider
        - type
      type: object
    ModelObjectLinkType:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkType"
        - enum:
            - url
          type: string
    ModelObjectLinkPartial:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLinkPartial"
        - $ref: "#/components/schemas/UrlLinkPartial"
    ModelObjectLink:
      oneOf:
        - $ref: "#/components/schemas/CodeRepoLink"
        - $ref: "#/components/schemas/UrlLink"
    ModelObjectDiagram:
      properties:
        id:
          type: string
        objectId:
          type: string
      required:
        - id
        - objectId
      type: object
    ModelObjectFlow:
      properties:
        id:
          type: string
        stepId:
          type: string
      required:
        - id
        - stepId
      type: object
    ModelObjectPartial:
      properties:
        caption:
          type: string
        commit:
          type: number
        description:
          type: string
        external:
          type: boolean
        icon:
          $ref: "#/components/schemas/ModelObjectIconNullable"
        labels:
          additionalProperties:
            type: string
          type: object
        links:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectLinkPartial"
          type: object
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/ModelObjectStatus"
        tagIds:
          items:
            type: string
          type: array
        teamIds:
          items:
            type: string
          type: array
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectTechnology"
          type: object
        type:
          $ref: "#/components/schemas/ModelObjectType"
      type: object
    ModelObjectRequired:
      properties:
        caption:
          type: string
        commit:
          type: number
        description:
          type: string
        external:
          type: boolean
        icon:
          $ref: "#/components/schemas/ModelObjectIconNullable"
        labels:
          additionalProperties:
            type: string
          type: object
        links:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectLinkPartial"
          type: object
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/ModelObjectStatus"
        tagIds:
          items:
            type: string
          type: array
        teamIds:
          items:
            type: string
          type: array
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectTechnology"
          type: object
        type:
          $ref: "#/components/schemas/ModelObjectType"
        domainId:
          type: string
        handleId:
          type: string
      required:
        - name
        - parentId
        - type
      type: object
    ModelObject:
      properties:
        caption:
          type: string
        commit:
          type: number
        description:
          type: string
        external:
          type: boolean
        icon:
          $ref: "#/components/schemas/ModelObjectIconNullable"
        labels:
          additionalProperties:
            type: string
          type: object
        links:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectLink"
          type: object
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/ModelObjectStatus"
        tagIds:
          items:
            type: string
          type: array
        teamIds:
          items:
            type: string
          type: array
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectTechnology"
          type: object
        type:
          $ref: "#/components/schemas/ModelObjectType"
        domainId:
          type: string
        handleId:
          type: string
        childDiagramIds:
          items:
            type: string
          type: array
        childIds:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        diagrams:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectDiagram"
          type: object
        flows:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectFlow"
          type: object
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - name
        - parentId
        - type
        - childDiagramIds
        - childIds
        - commit
        - createdAt
        - createdBy
        - createdById
        - diagrams
        - domainId
        - external
        - flows
        - handleId
        - icon
        - id
        - labels
        - landscapeId
        - links
        - status
        - tagIds
        - teamIds
        - technologies
        - version
        - versionId
      type: object
    ModelStatusType:
      enum:
        - live
        - future
        - deprecated
        - removed
      type: string
    ModelStatus:
      properties:
        color:
          $ref: "#/components/schemas/TagColor"
        id:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/ModelStatusType"
      required:
        - color
        - handleId
        - id
        - name
        - type
      type: object
    OrganizationPlan:
      enum:
        - free
        - indie
        - growth
        - enterprise
      type: string
    OrganizationStatus:
      enum:
        - active
        - canceled
        - incomplete_expired
        - incomplete
        - past_due
        - paused
        - trialing
        - unpaid
      type: string
    OrganizationUser:
      properties:
        landscapePermissions:
          additionalProperties:
            type: boolean
          type: object
        permission:
          $ref: "#/components/schemas/PermissionType"
      required:
        - permission
      type: object
    OrganizationBrand:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    OrganizationUserInfo:
      properties:
        email:
          format: email
          type: string
        jobRole:
          type: string
        lastActiveAt:
          format: date-time
          type: string
        name:
          maxLength: 128
          type: string
      required:
        - email
        - lastActiveAt
      type: object
    OrganizationPartial:
      properties:
        billingCurrency:
          $ref: "#/components/schemas/OrganizationBillingCurrency"
        billingCycle:
          $ref: "#/components/schemas/OrganizationBillingCycle"
        billingEmail:
          type: string
        name:
          type: string
        shareLinkAuthDomains:
          items:
            type: string
          nullable: true
          type: array
        shareLinksEnabled:
          type: boolean
      type: object
    OrganizationRequired:
      properties:
        billingCurrency:
          $ref: "#/components/schemas/OrganizationBillingCurrency"
        billingCycle:
          $ref: "#/components/schemas/OrganizationBillingCycle"
        billingEmail:
          type: string
        name:
          type: string
        shareLinkAuthDomains:
          items:
            type: string
          nullable: true
          type: array
        shareLinksEnabled:
          type: boolean
      required:
        - name
      type: object
    Organization:
      properties:
        billingCurrency:
          $ref: "#/components/schemas/OrganizationBillingCurrency"
        billingCycle:
          $ref: "#/components/schemas/OrganizationBillingCycle"
        billingEmail:
          type: string
        name:
          type: string
        shareLinkAuthDomains:
          items:
            type: string
          nullable: true
          type: array
        shareLinksEnabled:
          type: boolean
        autoInviteDomains:
          items:
            type: string
          type: array
        billingPaymentMethod:
          type: boolean
        cancelAt:
          format: date-time
          type: string
        canceledAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        plan:
          $ref: "#/components/schemas/OrganizationPlan"
        planEndsAt:
          format: date-time
          type: string
        seats:
          type: number
        status:
          $ref: "#/components/schemas/OrganizationStatus"
        trialEndsAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        userIds:
          items:
            type: string
          type: array
        users:
          additionalProperties:
            $ref: "#/components/schemas/OrganizationUser"
          type: object
      required:
        - name
        - autoInviteDomains
        - billingPaymentMethod
        - createdAt
        - createdBy
        - createdById
        - id
        - plan
        - seats
        - shareLinkAuthDomains
        - shareLinksEnabled
        - status
        - userIds
        - users
      type: object
    OrganizationBillingCurrency:
      enum:
        - usd
        - cad
        - eur
        - gbp
      type: string
    OrganizationBillingCycle:
      enum:
        - monthly
        - annually
      type: string
    OrganizationBillingLinks:
      properties:
        paymentMethodsUrl:
          type: string
        updateSubscriptionPlanUrl:
          type: string
        url:
          type: string
      required:
        - paymentMethodsUrl
        - url
      type: object
    OrganizationBillingSubscriptionCreate:
      properties:
        billingCurrency:
          $ref: "#/components/schemas/OrganizationBillingCurrency"
        billingCycle:
          $ref: "#/components/schemas/OrganizationBillingCycle"
        plan:
          $ref: "#/components/schemas/OrganizationPlan"
        seats:
          type: number
        trial:
          type: boolean
      required:
        - plan
        - seats
      type: object
    OrganizationBillingSubscriptionUpdate:
      properties:
        billingCycle:
          $ref: "#/components/schemas/OrganizationBillingCycle"
        cancelAtPeriodEnd:
          type: boolean
        plan:
          $ref: "#/components/schemas/OrganizationPlan"
        seats:
          type: number
        trial:
          type: boolean
        trialEnd:
          type: boolean
      type: object
    OrganizationUserInvitePartial:
      properties:
        email:
          type: string
        expiresAt:
          format: date-time
          type: string
        landscapePermissions:
          additionalProperties:
            type: boolean
          type: object
        permission:
          $ref: "#/components/schemas/PermissionType"
      type: object
    OrganizationUserInviteRequired:
      properties:
        email:
          type: string
        expiresAt:
          format: date-time
          type: string
        landscapePermissions:
          additionalProperties:
            type: boolean
          type: object
        permission:
          $ref: "#/components/schemas/PermissionType"
      required:
        - email
        - expiresAt
        - permission
      type: object
    OrganizationUserInvite:
      properties:
        email:
          type: string
        expiresAt:
          format: date-time
          type: string
        landscapePermissions:
          additionalProperties:
            type: boolean
          type: object
        permission:
          $ref: "#/components/schemas/PermissionType"
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        organizationId:
          type: string
        revokedAt:
          format: date-time
          type: string
        revokedBy:
          $ref: "#/components/schemas/AuthType"
        revokedById:
          type: string
        usedAt:
          format: date-time
          type: string
      required:
        - email
        - expiresAt
        - permission
        - createdAt
        - createdBy
        - createdById
        - id
        - organizationId
      type: object
    ShareLinkFrameLocation:
      enum:
        - notion
        - miro
        - confluence
        - sharepoint
        - powerpoint
      type: string
    ShareLinkStats:
      properties:
        totalVisitorCount:
          type: number
      required:
        - totalVisitorCount
      type: object
    ShareLinkPartial:
      properties:
        password:
          format: password
          minLength: 8
          type: string
        protected:
          type: boolean
      type: object
    ShareLinkRequired:
      properties:
        password:
          format: password
          minLength: 8
          type: string
        protected:
          type: boolean
      required:
        - protected
      type: object
    ShareLink:
      properties:
        password:
          format: password
          minLength: 8
          type: string
        protected:
          type: boolean
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        shortId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        versionId:
          type: string
      required:
        - protected
        - createdAt
        - createdBy
        - createdById
        - id
        - landscapeId
        - shortId
        - versionId
      type: object
    ShareLinkOptionsOverlayTab:
      enum:
        - tags
        - technology
        - status
      type: string
    ShareLinkOptionsMode:
      enum:
        - diagrams
        - tours
        - model-objects
        - diagram
        - flow
      type: string
    ShareLinkOptionsObjectTab:
      enum:
        - details
        - connections
      type: string
    ShareLinkOptionsDrawer:
      enum:
        - expanded
        - collapsed
      type: string
    ShareLinkOptionsDrawerObject:
      enum:
        - expanded
        - collapsed
      type: string
    ShareLinkOptionsRequired:
      properties:
        connectionIds:
          items:
            type: string
          nullable: true
          type: array
        diagramId:
          nullable: true
          type: string
        domainId:
          nullable: true
          type: string
        drawer:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        drawerObject:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        expandedIds:
          items:
            type: string
          nullable: true
          type: array
        filterIds:
          items:
            type: string
          nullable: true
          type: array
        filterIdsExcluded:
          items:
            type: string
          nullable: true
          type: array
        filterIdsIncluded:
          items:
            type: string
          nullable: true
          type: array
        flowId:
          nullable: true
          type: string
        flowPathIds:
          items:
            type: string
          nullable: true
          type: array
        flowStepId:
          nullable: true
          type: string
        mode:
          $ref: "#/components/schemas/ShareLinkOptionsMode"
        modelId:
          nullable: true
          type: string
        objectIds:
          items:
            type: string
          nullable: true
          type: array
        objectTab:
          enum:
            - details
            - connections
            - null
          nullable: true
          type: string
        overlayGroupId:
          nullable: true
          type: string
        overlayIdsFocused:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsHidden:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsPinned:
          items:
            type: string
          nullable: true
          type: array
        overlayTab:
          enum:
            - tags
            - technology
            - status
            - null
          nullable: true
          type: string
        preventNavigation:
          type: boolean
        search:
          nullable: true
          type: string
        x1:
          nullable: true
          type: number
        x2:
          nullable: true
          type: number
        y:
          nullable: true
          type: number
        y1:
          nullable: true
          type: number
        y2:
          nullable: true
          type: number
      required:
        - connectionIds
        - diagramId
        - domainId
        - drawer
        - drawerObject
        - expandedIds
        - filterIds
        - filterIdsExcluded
        - filterIdsIncluded
        - flowId
        - flowPathIds
        - flowStepId
        - mode
        - modelId
        - objectIds
        - objectTab
        - overlayGroupId
        - overlayIdsFocused
        - overlayIdsHidden
        - overlayIdsPinned
        - overlayTab
        - preventNavigation
        - search
        - x1
        - x2
        - y
        - y1
        - y2
      type: object
    ShareLinkOptions:
      properties:
        connectionIds:
          items:
            type: string
          nullable: true
          type: array
        diagramId:
          nullable: true
          type: string
        domainId:
          nullable: true
          type: string
        drawer:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        drawerObject:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        expandedIds:
          items:
            type: string
          nullable: true
          type: array
        filterIds:
          items:
            type: string
          nullable: true
          type: array
        filterIdsExcluded:
          items:
            type: string
          nullable: true
          type: array
        filterIdsIncluded:
          items:
            type: string
          nullable: true
          type: array
        flowId:
          nullable: true
          type: string
        flowPathIds:
          items:
            type: string
          nullable: true
          type: array
        flowStepId:
          nullable: true
          type: string
        mode:
          $ref: "#/components/schemas/ShareLinkOptionsMode"
        modelId:
          nullable: true
          type: string
        objectIds:
          items:
            type: string
          nullable: true
          type: array
        objectTab:
          enum:
            - details
            - connections
            - null
          nullable: true
          type: string
        overlayGroupId:
          nullable: true
          type: string
        overlayIdsFocused:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsHidden:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsPinned:
          items:
            type: string
          nullable: true
          type: array
        overlayTab:
          enum:
            - tags
            - technology
            - status
            - null
          nullable: true
          type: string
        preventNavigation:
          type: boolean
        search:
          nullable: true
          type: string
        x1:
          nullable: true
          type: number
        x2:
          nullable: true
          type: number
        y:
          nullable: true
          type: number
        y1:
          nullable: true
          type: number
        y2:
          nullable: true
          type: number
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        hash:
          type: string
        id:
          type: string
        shareLinkId:
          type: string
        shortId:
          type: string
      required:
        - connectionIds
        - diagramId
        - domainId
        - drawer
        - drawerObject
        - expandedIds
        - filterIds
        - filterIdsExcluded
        - filterIdsIncluded
        - flowId
        - flowPathIds
        - flowStepId
        - mode
        - modelId
        - objectIds
        - objectTab
        - overlayGroupId
        - overlayIdsFocused
        - overlayIdsHidden
        - overlayIdsPinned
        - overlayTab
        - preventNavigation
        - search
        - x1
        - x2
        - y
        - y1
        - y2
        - createdAt
        - createdBy
        - createdById
        - hash
        - id
        - shareLinkId
        - shortId
      type: object
    TagFilter:
      properties:
        domainId:
          type: string
        groupId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    TagColor:
      enum:
        - blue
        - green
        - yellow
        - orange
        - red
        - beaver
        - dark-blue
        - purple
        - pink
        - white
        - grey
        - black
      type: string
    TagPartial:
      properties:
        color:
          $ref: "#/components/schemas/TagColor"
        commit:
          type: number
        groupId:
          type: string
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    TagRequired:
      properties:
        color:
          $ref: "#/components/schemas/TagColor"
        commit:
          type: number
        groupId:
          type: string
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        handleId:
          type: string
      required:
        - color
        - groupId
        - index
        - name
      type: object
    Tag:
      properties:
        color:
          $ref: "#/components/schemas/TagColor"
        commit:
          type: number
        groupId:
          type: string
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        modelConnectionIds:
          items:
            type: string
          type: array
        modelObjectIds:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - color
        - groupId
        - index
        - name
        - commit
        - createdAt
        - createdBy
        - createdById
        - handleId
        - id
        - labels
        - landscapeId
        - modelConnectionIds
        - modelObjectIds
        - version
        - versionId
      type: object
    TagGroupFilter:
      properties:
        domainId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    TagGroupIcon:
      enum:
        - bug
        - calendar-check
        - calendar-times
        - cloud
        - cog
        - database
        - exclamation-triangle
        - file
        - globe
        - laptop-code
        - lightbulb
        - lock
        - microchip
        - minus
        - mobile
        - network-wired
        - plus
        - poo
        - robot
        - rocket
        - sack-dollar
        - server
        - sledding
        - snowman
        - star
        - times
        - toolbox
        - trash
        - users
        - wifi
      type: string
    TagGroupPartial:
      properties:
        commit:
          type: number
        icon:
          $ref: "#/components/schemas/TagGroupIcon"
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    TagGroupRequired:
      properties:
        commit:
          type: number
        icon:
          $ref: "#/components/schemas/TagGroupIcon"
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        handleId:
          type: string
      required:
        - icon
        - index
        - name
      type: object
    TagGroup:
      properties:
        commit:
          type: number
        icon:
          $ref: "#/components/schemas/TagGroupIcon"
        index:
          type: number
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - icon
        - index
        - name
        - commit
        - createdAt
        - createdBy
        - createdById
        - handleId
        - id
        - labels
        - landscapeId
        - version
        - versionId
      type: object
    TaskType:
      enum:
        - batch
        - comment-create
        - comment-delete
        - comment-reply-create
        - comment-reply-delete
        - comment-reply-update
        - comment-update
        - diagram-content-update
        - diagram-create
        - diagram-delete
        - diagram-group-create
        - diagram-group-delete
        - diagram-group-update
        - diagram-update
        - domain-create
        - domain-delete
        - domain-update
        - flow-create
        - flow-delete
        - flow-update
        - model-connection-create
        - model-connection-delete
        - model-connection-update
        - model-object-create
        - model-object-delete
        - model-object-update
        - navigation
        - tag-create
        - tag-delete
        - tag-group-create
        - tag-group-delete
        - tag-group-update
        - tag-update
        - tour-create
        - tour-delete
        - tour-update
      type: string
    TaskBatch:
      properties:
        tasks:
          items:
            $ref: "#/components/schemas/Task"
          type: array
        type:
          enum:
            - batch
          type: string
      required:
        - tasks
        - type
      type: object
    TaskNavigation:
      properties:
        route:
          $ref: "#/components/schemas/TaskNavigationRoute"
        type:
          enum:
            - navigation
          type: string
      required:
        - route
        - type
      type: object
    TaskNavigationRoute:
      properties:
        name:
          nullable: true
          type: object
        params:
          additionalProperties:
            type: string
          type: object
        query:
          additionalProperties:
            anyOf:
              - nullable: true
                type: string
              - items:
                  nullable: true
                  type: string
                type: array
          type: object
      type: object
    TaskCommentCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentRequired"
        type:
          enum:
            - comment-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskCommentUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentPartial"
        type:
          enum:
            - comment-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskCommentDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - comment-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskCommentReplyCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentReplyRequired"
        type:
          enum:
            - comment-reply-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskCommentReplyUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/CommentReplyPartial"
        type:
          enum:
            - comment-reply-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskCommentReplyDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - comment-reply-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskDiagramCreate:
      properties:
        id:
          type: string
        props:
          allOf:
            - $ref: "#/components/schemas/DiagramRequired"
            - $ref: "#/components/schemas/DiagramContentRequired"
        type:
          enum:
            - diagram-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDiagramUpdate:
      properties:
        id:
          type: string
        props:
          allOf:
            - $ref: "#/components/schemas/DiagramPartial"
            - $ref: "#/components/schemas/DiagramContentPartial"
        type:
          enum:
            - diagram-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDiagramDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - diagram-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskDiagramContentUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramContentPartial"
        type:
          enum:
            - diagram-content-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDiagramGroupCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramGroupRequired"
        type:
          enum:
            - diagram-group-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDiagramGroupUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/DiagramGroupPartial"
        type:
          enum:
            - diagram-group-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDiagramGroupDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - diagram-group-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskDomainCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/DomainRequired"
        type:
          enum:
            - domain-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDomainUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/DomainPartial"
        type:
          enum:
            - domain-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskDomainDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - domain-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskModelObjectCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelObjectRequired"
        type:
          enum:
            - model-object-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskModelObjectUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelObjectPartial"
        type:
          enum:
            - model-object-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskModelObjectDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - model-object-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskModelConnectionCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelConnectionRequired"
        type:
          enum:
            - model-connection-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskModelConnectionUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/ModelConnectionPartial"
        type:
          enum:
            - model-connection-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskModelConnectionDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - model-connection-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskFlowCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/FlowRequired"
        type:
          enum:
            - flow-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskFlowUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/FlowPartial"
        type:
          enum:
            - flow-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskFlowDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - flow-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskTagCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagRequired"
        type:
          enum:
            - tag-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskTagUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagPartial"
        type:
          enum:
            - tag-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskTagDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - tag-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskTagGroupCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagGroupRequired"
        type:
          enum:
            - tag-group-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskTagGroupUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TagGroupPartial"
        type:
          enum:
            - tag-group-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskTagGroupDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - tag-group-delete
          type: string
      required:
        - id
        - type
      type: object
    TaskTourCreate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TourRequired"
        type:
          enum:
            - tour-create
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskTourUpdate:
      properties:
        id:
          type: string
        props:
          $ref: "#/components/schemas/TourPartial"
        type:
          enum:
            - tour-update
          type: string
      required:
        - id
        - props
        - type
      type: object
    TaskTourDelete:
      properties:
        id:
          type: string
        type:
          enum:
            - tour-delete
          type: string
      required:
        - id
        - type
      type: object
    Task:
      oneOf:
        - $ref: "#/components/schemas/TaskBatch"
        - $ref: "#/components/schemas/TaskNavigation"
        - $ref: "#/components/schemas/TaskCommentCreate"
        - $ref: "#/components/schemas/TaskCommentUpdate"
        - $ref: "#/components/schemas/TaskCommentDelete"
        - $ref: "#/components/schemas/TaskCommentReplyCreate"
        - $ref: "#/components/schemas/TaskCommentReplyUpdate"
        - $ref: "#/components/schemas/TaskCommentReplyDelete"
        - $ref: "#/components/schemas/TaskDiagramCreate"
        - $ref: "#/components/schemas/TaskDiagramUpdate"
        - $ref: "#/components/schemas/TaskDiagramDelete"
        - $ref: "#/components/schemas/TaskDiagramContentUpdate"
        - $ref: "#/components/schemas/TaskDiagramGroupCreate"
        - $ref: "#/components/schemas/TaskDiagramGroupUpdate"
        - $ref: "#/components/schemas/TaskDiagramGroupDelete"
        - $ref: "#/components/schemas/TaskDomainCreate"
        - $ref: "#/components/schemas/TaskDomainUpdate"
        - $ref: "#/components/schemas/TaskDomainDelete"
        - $ref: "#/components/schemas/TaskModelObjectCreate"
        - $ref: "#/components/schemas/TaskModelObjectUpdate"
        - $ref: "#/components/schemas/TaskModelObjectDelete"
        - $ref: "#/components/schemas/TaskModelConnectionCreate"
        - $ref: "#/components/schemas/TaskModelConnectionUpdate"
        - $ref: "#/components/schemas/TaskModelConnectionDelete"
        - $ref: "#/components/schemas/TaskFlowCreate"
        - $ref: "#/components/schemas/TaskFlowUpdate"
        - $ref: "#/components/schemas/TaskFlowDelete"
        - $ref: "#/components/schemas/TaskTagCreate"
        - $ref: "#/components/schemas/TaskTagUpdate"
        - $ref: "#/components/schemas/TaskTagDelete"
        - $ref: "#/components/schemas/TaskTagGroupCreate"
        - $ref: "#/components/schemas/TaskTagGroupUpdate"
        - $ref: "#/components/schemas/TaskTagGroupDelete"
        - $ref: "#/components/schemas/TaskTourCreate"
        - $ref: "#/components/schemas/TaskTourUpdate"
        - $ref: "#/components/schemas/TaskTourDelete"
    TaskList:
      items:
        $ref: "#/components/schemas/Task"
      type: array
    TaskListRevertable:
      properties:
        revertTasks:
          $ref: "#/components/schemas/TaskList"
        tasks:
          $ref: "#/components/schemas/TaskList"
      required:
        - revertTasks
        - tasks
      type: object
    TaskProposed:
      properties:
        proposedAt:
          format: date-time
          type: string
        proposedBy:
          $ref: "#/components/schemas/AuthType"
        proposedById:
          type: string
        task:
          $ref: "#/components/schemas/Task"
      required:
        - proposedAt
        - proposedBy
        - proposedById
        - task
      type: object
    TeamPartial:
      properties:
        name:
          maxLength: 128
          type: string
        userIds:
          items:
            type: string
          type: array
      type: object
    TeamRequired:
      properties:
        name:
          maxLength: 128
          type: string
        userIds:
          items:
            type: string
          type: array
      required:
        - name
      type: object
    Team:
      properties:
        name:
          maxLength: 128
          type: string
        userIds:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        id:
          type: string
        modelObjectHandleIds:
          items:
            type: string
          type: array
        organizationId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - name
        - createdAt
        - createdBy
        - createdById
        - id
        - modelObjectHandleIds
        - organizationId
        - userIds
      type: object
    TourFilter:
      properties:
        domainId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      type: object
    TourStepOverlayTab:
      enum:
        - tags
        - technology
        - status
      type: string
    TourStepType:
      enum:
        - diagram
        - flow
      type: string
    TourStepObjectTab:
      enum:
        - details
        - connections
      type: string
    TourStepDrawer:
      enum:
        - expanded
        - collapsed
      type: string
    TourStepDrawerObject:
      enum:
        - expanded
        - collapsed
      type: string
    TourStepPartial:
      properties:
        connectionIds:
          items:
            type: string
          nullable: true
          type: array
        diagramId:
          type: string
        drawer:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        drawerObject:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        flowId:
          nullable: true
          type: string
        flowPathIds:
          items:
            type: string
          nullable: true
          type: array
        flowStepId:
          nullable: true
          type: string
        id:
          type: string
        index:
          type: number
        modelId:
          type: string
        objectIds:
          items:
            type: string
          nullable: true
          type: array
        objectTab:
          enum:
            - details
            - connections
            - null
          nullable: true
          type: string
        overlayGroupId:
          nullable: true
          type: string
        overlayIdsFocused:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsHidden:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsPinned:
          items:
            type: string
          nullable: true
          type: array
        overlayTab:
          enum:
            - tags
            - technology
            - status
            - null
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/TourStepType"
        x1:
          nullable: true
          type: number
        x2:
          nullable: true
          type: number
        y1:
          nullable: true
          type: number
        y2:
          nullable: true
          type: number
      type: object
    TourStep:
      properties:
        connectionIds:
          items:
            type: string
          nullable: true
          type: array
        diagramId:
          type: string
        drawer:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        drawerObject:
          enum:
            - expanded
            - collapsed
            - null
          nullable: true
          type: string
        flowId:
          nullable: true
          type: string
        flowPathIds:
          items:
            type: string
          nullable: true
          type: array
        flowStepId:
          nullable: true
          type: string
        id:
          type: string
        index:
          type: number
        modelId:
          type: string
        objectIds:
          items:
            type: string
          nullable: true
          type: array
        objectTab:
          enum:
            - details
            - connections
            - null
          nullable: true
          type: string
        overlayGroupId:
          nullable: true
          type: string
        overlayIdsFocused:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsHidden:
          items:
            type: string
          nullable: true
          type: array
        overlayIdsPinned:
          items:
            type: string
          nullable: true
          type: array
        overlayTab:
          enum:
            - tags
            - technology
            - status
            - null
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/TourStepType"
        x1:
          nullable: true
          type: number
        x2:
          nullable: true
          type: number
        y1:
          nullable: true
          type: number
        y2:
          nullable: true
          type: number
      required:
        - connectionIds
        - diagramId
        - drawer
        - drawerObject
        - flowId
        - flowPathIds
        - flowStepId
        - id
        - index
        - modelId
        - objectIds
        - objectTab
        - overlayGroupId
        - overlayIdsFocused
        - overlayIdsHidden
        - overlayIdsPinned
        - overlayTab
        - type
        - x1
        - x2
        - y1
        - y2
      type: object
    TourPartial:
      properties:
        commit:
          type: number
        description:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        steps:
          properties:
            $add:
              additionalProperties:
                $ref: "#/components/schemas/TourStep"
              type: object
            $remove:
              items:
                type: string
              type: array
            $replace:
              additionalProperties:
                $ref: "#/components/schemas/TourStep"
              type: object
            $update:
              additionalProperties:
                $ref: "#/components/schemas/TourStepPartial"
              type: object
          type: object
      type: object
    TourRequired:
      properties:
        commit:
          type: number
        description:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        steps:
          additionalProperties:
            $ref: "#/components/schemas/TourStep"
          type: object
        handleId:
          type: string
      required:
        - name
      type: object
    Tour:
      properties:
        commit:
          type: number
        description:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        steps:
          additionalProperties:
            $ref: "#/components/schemas/TourStep"
          type: object
        handleId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/AuthType"
        deletedById:
          type: string
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
        version:
          type: number
        versionId:
          type: string
      required:
        - name
        - commit
        - createdAt
        - createdBy
        - createdById
        - description
        - handleId
        - id
        - labels
        - landscapeId
        - steps
        - version
        - versionId
      type: object
    UrlLinkPartial:
      properties:
        customName:
          type: string
        id:
          type: string
        index:
          type: number
        name:
          type: string
        type:
          enum:
            - url
          type: string
        url:
          type: string
      required:
        - type
        - url
      type: object
    UrlLink:
      properties:
        customName:
          type: string
        id:
          type: string
        index:
          type: number
        name:
          type: string
        type:
          enum:
            - url
          type: string
        url:
          type: string
      required:
        - type
        - url
        - id
        - index
        - name
      type: object
    UserPartial:
      properties:
        defaultOrganizationId:
          nullable: true
          type: string
        defaultOrganizationLandscapeIds:
          additionalProperties:
            type: string
          nullable: true
          type: object
        email:
          format: email
          type: string
        jobRole:
          type: string
        name:
          type: string
        referredBy:
          type: string
        referredByOrganizationId:
          type: string
        referredByUserId:
          type: string
        sendNews:
          type: boolean
      type: object
    UserRequired:
      properties:
        defaultOrganizationId:
          nullable: true
          type: string
        defaultOrganizationLandscapeIds:
          additionalProperties:
            type: string
          nullable: true
          type: object
        email:
          format: email
          type: string
        jobRole:
          type: string
        name:
          type: string
        referredBy:
          type: string
        referredByOrganizationId:
          type: string
        referredByUserId:
          type: string
        sendNews:
          type: boolean
      required:
        - email
        - sendNews
      type: object
    User:
      properties:
        defaultOrganizationId:
          nullable: true
          type: string
        defaultOrganizationLandscapeIds:
          additionalProperties:
            type: string
          nullable: true
          type: object
        email:
          format: email
          type: string
        jobRole:
          type: string
        name:
          type: string
        referredBy:
          type: string
        referredByOrganizationId:
          type: string
        referredByUserId:
          type: string
        sendNews:
          type: boolean
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastActiveAt:
          format: date-time
          type: string
      required:
        - email
        - sendNews
        - createdAt
        - id
        - lastActiveAt
        - defaultOrganizationLandscapeIds
        - defaultOrganizationId
      type: object
    UserGoalStatus:
      enum:
        - incomplete
        - complete
      type: string
    UserGoalName:
      enum:
        - add-object
        - zoom-into-object
        - create-connections
        - share-landscape
        - open-context-diagram
        - create-comment
      type: string
    UserGoal:
      properties:
        completedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        name:
          $ref: "#/components/schemas/UserGoalName"
        progress:
          minimum: 0
          type: number
        progressData:
          items:
            type: string
          type: array
        status:
          $ref: "#/components/schemas/UserGoalStatus"
        steps:
          minimum: 1
          type: number
        updatedAt:
          format: date-time
          type: string
        userId:
          type: string
      required:
        - createdAt
        - id
        - name
        - progress
        - progressData
        - status
        - steps
        - userId
      type: object
    VersionPartial:
      properties:
        modelHandleId:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        notes:
          minLength: 10
          type: string
      type: object
    VersionRequired:
      properties:
        modelHandleId:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        notes:
          minLength: 10
          type: string
      required:
        - modelHandleId
        - name
        - notes
      type: object
    Version:
      properties:
        modelHandleId:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        notes:
          minLength: 10
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        diagramHandleIds:
          items:
            type: string
          type: array
        id:
          type: string
        landscapeId:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - modelHandleId
        - name
        - notes
        - createdAt
        - createdBy
        - createdById
        - diagramHandleIds
        - id
        - landscapeId
        - tags
      type: object
    VersionRevertPartial:
      properties:
        notes:
          minLength: 10
          type: string
      type: object
    VersionRevertRequired:
      properties:
        notes:
          minLength: 10
          type: string
        versionId:
          type: string
      required:
        - notes
        - versionId
      type: object
    VersionRevert:
      properties:
        notes:
          minLength: 10
          type: string
        versionId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/AuthType"
        createdById:
          type: string
        diagramHandleIds:
          items:
            type: string
          type: array
        id:
          type: string
        landscapeId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/AuthType"
        updatedById:
          type: string
      required:
        - notes
        - versionId
        - createdAt
        - createdBy
        - createdById
        - diagramHandleIds
        - id
        - landscapeId
      type: object
    PubSubEditorLocation:
      properties:
        location:
          $ref: "#/components/schemas/EditorLocation"
        socketId:
          type: string
        type:
          enum:
            - added
            - modified
          type: string
      required:
        - location
        - socketId
        - type
      type: object
    PubSubEditorTyping:
      properties:
        socketId:
          type: string
        type:
          enum:
            - added
            - modified
          type: string
        typing:
          $ref: "#/components/schemas/EditorTyping"
      required:
        - socketId
        - type
        - typing
      type: object
    SocketClientEvents:
      allOf:
        - $ref: "#/components/schemas/SocketClientCommentEvents"
        - $ref: "#/components/schemas/SocketClientDiagramEvents"
        - $ref: "#/components/schemas/SocketClientDomainEvents"
        - $ref: "#/components/schemas/SocketClientEditorEvents"
        - $ref: "#/components/schemas/SocketClientFlowEvents"
        - $ref: "#/components/schemas/SocketClientTourEvents"
        - $ref: "#/components/schemas/SocketClientLandscapeEvents"
        - $ref: "#/components/schemas/SocketClientModelEvents"
        - $ref: "#/components/schemas/SocketClientTagEvents"
        - $ref: "#/components/schemas/SocketClientVersionEvents"
    SocketServerEvents:
      allOf:
        - $ref: "#/components/schemas/SocketServerCommentEvents"
        - $ref: "#/components/schemas/SocketServerDiagramEvents"
        - $ref: "#/components/schemas/SocketServerDomainEvents"
        - $ref: "#/components/schemas/SocketServerEditorEvents"
        - $ref: "#/components/schemas/SocketServerFlowEvents"
        - $ref: "#/components/schemas/SocketServerTourEvents"
        - $ref: "#/components/schemas/SocketServerLandscapeEvents"
        - $ref: "#/components/schemas/SocketServerModelEvents"
        - $ref: "#/components/schemas/SocketServerTagEvents"
        - $ref: "#/components/schemas/SocketServerVersionEvents"
    SocketClientCommentsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientCommentsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientCommentsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientCommentEvents:
      properties:
        comments-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientCommentsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientCommentsSubscribeReply"
          required:
            - body
            - reply
          type: object
        comments-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientCommentsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - comments-subscribe
        - comments-unsubscribe
      type: object
    SocketServerCommentsBody:
      properties:
        comments:
          items:
            $ref: "#/components/schemas/Comment"
          type: array
        subscriptionId:
          type: string
      required:
        - comments
        - subscriptionId
      type: object
    SocketServerCommentAddedBody:
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
        subscriptionId:
          type: string
      required:
        - comment
        - subscriptionId
      type: object
    SocketServerCommentModifiedBody:
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
        subscriptionId:
          type: string
      required:
        - comment
        - subscriptionId
      type: object
    SocketServerCommentRemovedBody:
      properties:
        comment:
          $ref: "#/components/schemas/Comment"
        subscriptionId:
          type: string
      required:
        - comment
        - subscriptionId
      type: object
    SocketServerCommentEvents:
      properties:
        comment-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerCommentAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        comment-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerCommentModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        comment-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerCommentRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        comments:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerCommentsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - comment-added
        - comment-modified
        - comment-removed
        - comments
      type: object
    SocketClientDiagramsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientDiagramsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDiagramsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDiagramContentsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDiagramContentsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDiagramContentsSubscribeBody:
      properties:
        filter:
          properties:
            afterViewedAtDate:
              type: string
          type: object
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientDiagramGroupsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientDiagramGroupsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDiagramGroupsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDiagramEvents:
      properties:
        diagram-contents-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDiagramContentsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientDiagramContentsSubscribeReply"
          required:
            - body
            - reply
          type: object
        diagram-contents-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDiagramContentsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-groups-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDiagramGroupsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientDiagramGroupsSubscribeReply"
          required:
            - body
            - reply
          type: object
        diagram-groups-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDiagramGroupsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagrams-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDiagramsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientDiagramsSubscribeReply"
          required:
            - body
            - reply
          type: object
        diagrams-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDiagramsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - diagram-contents-subscribe
        - diagram-contents-unsubscribe
        - diagram-groups-subscribe
        - diagram-groups-unsubscribe
        - diagrams-subscribe
        - diagrams-unsubscribe
      type: object
    SocketServerDiagramsBody:
      properties:
        diagrams:
          items:
            $ref: "#/components/schemas/Diagram"
          type: array
        subscriptionId:
          type: string
      required:
        - diagrams
        - subscriptionId
      type: object
    SocketServerDiagramAddedBody:
      properties:
        diagram:
          $ref: "#/components/schemas/Diagram"
        subscriptionId:
          type: string
      required:
        - diagram
        - subscriptionId
      type: object
    SocketServerDiagramModifiedBody:
      properties:
        diagram:
          $ref: "#/components/schemas/Diagram"
        subscriptionId:
          type: string
      required:
        - diagram
        - subscriptionId
      type: object
    SocketServerDiagramRemovedBody:
      properties:
        diagram:
          $ref: "#/components/schemas/Diagram"
        subscriptionId:
          type: string
      required:
        - diagram
        - subscriptionId
      type: object
    SocketServerDiagramContentsBody:
      properties:
        diagramContents:
          items:
            $ref: "#/components/schemas/DiagramContent"
          type: array
        subscriptionId:
          type: string
      required:
        - diagramContents
        - subscriptionId
      type: object
    SocketServerDiagramContentAddedBody:
      properties:
        diagramContent:
          $ref: "#/components/schemas/DiagramContent"
        subscriptionId:
          type: string
      required:
        - diagramContent
        - subscriptionId
      type: object
    SocketServerDiagramContentModifiedBody:
      properties:
        diagramContent:
          $ref: "#/components/schemas/DiagramContent"
        subscriptionId:
          type: string
      required:
        - diagramContent
        - subscriptionId
      type: object
    SocketServerDiagramContentRemovedBody:
      properties:
        diagramContent:
          $ref: "#/components/schemas/DiagramContent"
        subscriptionId:
          type: string
      required:
        - diagramContent
        - subscriptionId
      type: object
    SocketServerDiagramGroupsBody:
      properties:
        diagramGroups:
          items:
            $ref: "#/components/schemas/DiagramGroup"
          type: array
        subscriptionId:
          type: string
      required:
        - diagramGroups
        - subscriptionId
      type: object
    SocketServerDiagramGroupAddedBody:
      properties:
        diagramGroup:
          $ref: "#/components/schemas/DiagramGroup"
        subscriptionId:
          type: string
      required:
        - diagramGroup
        - subscriptionId
      type: object
    SocketServerDiagramGroupModifiedBody:
      properties:
        diagramGroup:
          $ref: "#/components/schemas/DiagramGroup"
        subscriptionId:
          type: string
      required:
        - diagramGroup
        - subscriptionId
      type: object
    SocketServerDiagramGroupRemovedBody:
      properties:
        diagramGroup:
          $ref: "#/components/schemas/DiagramGroup"
        subscriptionId:
          type: string
      required:
        - diagramGroup
        - subscriptionId
      type: object
    SocketServerDiagramEvents:
      properties:
        diagram-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-content-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramContentAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-content-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramContentModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-content-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramContentRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-contents:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramContentsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-group-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramGroupAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-group-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramGroupModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-group-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramGroupRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-groups:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramGroupsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagram-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        diagrams:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDiagramsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - diagram-added
        - diagram-content-added
        - diagram-content-modified
        - diagram-content-removed
        - diagram-contents
        - diagram-group-added
        - diagram-group-modified
        - diagram-group-removed
        - diagram-groups
        - diagram-modified
        - diagram-removed
        - diagrams
      type: object
    SocketClientDomainsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientDomainsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDomainsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientDomainEvents:
      properties:
        domains-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDomainsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientDomainsSubscribeReply"
          required:
            - body
            - reply
          type: object
        domains-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientDomainsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - domains-subscribe
        - domains-unsubscribe
      type: object
    SocketServerDomainsBody:
      properties:
        domains:
          items:
            $ref: "#/components/schemas/Domain"
          type: array
        subscriptionId:
          type: string
      required:
        - domains
        - subscriptionId
      type: object
    SocketServerDomainAddedBody:
      properties:
        domain:
          $ref: "#/components/schemas/Domain"
        subscriptionId:
          type: string
      required:
        - domain
        - subscriptionId
      type: object
    SocketServerDomainModifiedBody:
      properties:
        domain:
          $ref: "#/components/schemas/Domain"
        subscriptionId:
          type: string
      required:
        - domain
        - subscriptionId
      type: object
    SocketServerDomainRemovedBody:
      properties:
        domain:
          $ref: "#/components/schemas/Domain"
        subscriptionId:
          type: string
      required:
        - domain
        - subscriptionId
      type: object
    SocketServerDomainEvents:
      properties:
        domain-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDomainAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        domain-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDomainModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        domain-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDomainRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        domains:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerDomainsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - domain-added
        - domain-modified
        - domain-removed
        - domains
      type: object
    SocketClientEditorLocationUpdateBody:
      properties:
        landscapeId:
          type: string
        location:
          $ref: "#/components/schemas/EditorLocationUpdate"
      required:
        - landscapeId
        - location
      type: object
    SocketClientEditorTypingUpdateBody:
      properties:
        landscapeId:
          type: string
        typing:
          $ref: "#/components/schemas/EditorTypingUpdate"
      required:
        - landscapeId
        - typing
      type: object
    SocketClientEditorSubscribeBody:
      properties:
        landscapeId:
          type: string
      required:
        - landscapeId
      type: object
    SocketClientEditorSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientEditorUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientEditorEvents:
      properties:
        editor-location-update:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientEditorLocationUpdateBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientEditorSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientEditorSubscribeReply"
          required:
            - body
            - reply
          type: object
        editor-typing-update:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientEditorTypingUpdateBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientEditorUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - editor-location-update
        - editor-subscribe
        - editor-typing-update
        - editor-unsubscribe
      type: object
    SocketServerEditorLocationAddedBody:
      properties:
        location:
          $ref: "#/components/schemas/EditorLocation"
        subscriptionId:
          type: string
      required:
        - location
        - subscriptionId
      type: object
    SocketServerEditorLocationModifiedBody:
      properties:
        location:
          $ref: "#/components/schemas/EditorLocation"
        subscriptionId:
          type: string
      required:
        - location
        - subscriptionId
      type: object
    SocketServerEditorLocationsBody:
      properties:
        locations:
          items:
            $ref: "#/components/schemas/EditorLocation"
          type: array
        subscriptionId:
          type: string
      required:
        - locations
        - subscriptionId
      type: object
    SocketServerEditorTypingAddedBody:
      properties:
        subscriptionId:
          type: string
        typing:
          $ref: "#/components/schemas/EditorTyping"
      required:
        - subscriptionId
        - typing
      type: object
    SocketServerEditorTypingModifiedBody:
      properties:
        subscriptionId:
          type: string
        typing:
          $ref: "#/components/schemas/EditorTyping"
      required:
        - subscriptionId
        - typing
      type: object
    SocketServerEditorTypingBody:
      properties:
        subscriptionId:
          type: string
        typing:
          items:
            $ref: "#/components/schemas/EditorTyping"
          type: array
      required:
        - subscriptionId
        - typing
      type: object
    SocketServerEditorEvents:
      properties:
        editor-location-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerEditorLocationAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-location-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerEditorLocationModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-locations:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerEditorLocationsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-typing:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerEditorTypingBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-typing-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerEditorTypingAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        editor-typing-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerEditorTypingModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - editor-location-added
        - editor-location-modified
        - editor-locations
        - editor-typing-added
        - editor-typing-modified
        - editor-typing
      type: object
    SocketClientFlowsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientFlowsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientFlowsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientFlowEvents:
      properties:
        flows-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientFlowsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientFlowsSubscribeReply"
          required:
            - body
            - reply
          type: object
        flows-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientFlowsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - flows-subscribe
        - flows-unsubscribe
      type: object
    SocketServerFlowsBody:
      properties:
        flows:
          items:
            $ref: "#/components/schemas/Flow"
          type: array
        subscriptionId:
          type: string
      required:
        - flows
        - subscriptionId
      type: object
    SocketServerFlowAddedBody:
      properties:
        flow:
          $ref: "#/components/schemas/Flow"
        subscriptionId:
          type: string
      required:
        - flow
        - subscriptionId
      type: object
    SocketServerFlowModifiedBody:
      properties:
        flow:
          $ref: "#/components/schemas/Flow"
        subscriptionId:
          type: string
      required:
        - flow
        - subscriptionId
      type: object
    SocketServerFlowRemovedBody:
      properties:
        flow:
          $ref: "#/components/schemas/Flow"
        subscriptionId:
          type: string
      required:
        - flow
        - subscriptionId
      type: object
    SocketServerFlowEvents:
      properties:
        flow-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerFlowAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        flow-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerFlowModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        flow-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerFlowRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        flows:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerFlowsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - flow-added
        - flow-modified
        - flow-removed
        - flows
      type: object
    SocketClientLandscapeSubscribeBody:
      properties:
        landscapeId:
          type: string
      required:
        - landscapeId
      type: object
    SocketClientLandscapeSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientLandscapeUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientLandscapeEvents:
      properties:
        landscape-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientLandscapeSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientLandscapeSubscribeReply"
          required:
            - body
            - reply
          type: object
        landscape-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientLandscapeUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - landscape-subscribe
        - landscape-unsubscribe
      type: object
    SocketServerLandscapeBody:
      properties:
        landscape:
          $ref: "#/components/schemas/LandscapeNullable"
        subscriptionId:
          type: string
      required:
        - landscape
        - subscriptionId
      type: object
    SocketServerLandscapeEvents:
      properties:
        landscape:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerLandscapeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - landscape
      type: object
    SocketClientModelObjectsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientModelObjectsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientModelObjectsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientModelConnectionsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientModelConnectionsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientModelConnectionsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientModelEvents:
      properties:
        model-connections-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientModelConnectionsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientModelConnectionsSubscribeReply"
          required:
            - body
            - reply
          type: object
        model-connections-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientModelConnectionsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-objects-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientModelObjectsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientModelObjectsSubscribeReply"
          required:
            - body
            - reply
          type: object
        model-objects-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientModelObjectsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - model-connections-subscribe
        - model-connections-unsubscribe
        - model-objects-subscribe
        - model-objects-unsubscribe
      type: object
    SocketServerModelObjectAddedBody:
      properties:
        modelObject:
          $ref: "#/components/schemas/ModelObject"
        subscriptionId:
          type: string
      required:
        - modelObject
        - subscriptionId
      type: object
    SocketServerModelObjectModifiedBody:
      properties:
        modelObject:
          $ref: "#/components/schemas/ModelObject"
        subscriptionId:
          type: string
      required:
        - modelObject
        - subscriptionId
      type: object
    SocketServerModelObjectRemovedBody:
      properties:
        modelObject:
          $ref: "#/components/schemas/ModelObject"
        subscriptionId:
          type: string
      required:
        - modelObject
        - subscriptionId
      type: object
    SocketServerModelObjectsBody:
      properties:
        modelObjects:
          items:
            $ref: "#/components/schemas/ModelObject"
          type: array
        subscriptionId:
          type: string
      required:
        - modelObjects
        - subscriptionId
      type: object
    SocketServerModelConnectionAddedBody:
      properties:
        modelConnection:
          $ref: "#/components/schemas/ModelConnection"
        subscriptionId:
          type: string
      required:
        - modelConnection
        - subscriptionId
      type: object
    SocketServerModelConnectionModifiedBody:
      properties:
        modelConnection:
          $ref: "#/components/schemas/ModelConnection"
        subscriptionId:
          type: string
      required:
        - modelConnection
        - subscriptionId
      type: object
    SocketServerModelConnectionRemovedBody:
      properties:
        modelConnection:
          $ref: "#/components/schemas/ModelConnection"
        subscriptionId:
          type: string
      required:
        - modelConnection
        - subscriptionId
      type: object
    SocketServerModelConnectionsBody:
      properties:
        modelConnections:
          items:
            $ref: "#/components/schemas/ModelConnection"
          type: array
        subscriptionId:
          type: string
      required:
        - modelConnections
        - subscriptionId
      type: object
    SocketServerModelEvents:
      properties:
        model-connection-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelConnectionAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-connection-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelConnectionModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-connection-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelConnectionRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-connections:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelConnectionsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-object-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelObjectAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-object-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelObjectModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-object-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelObjectRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        model-objects:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerModelObjectsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - model-connection-added
        - model-connection-modified
        - model-connection-removed
        - model-connections
        - model-object-added
        - model-object-modified
        - model-object-removed
        - model-objects
      type: object
    SocketClientTagsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientTagsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientTagsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientTagGroupsSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientTagGroupsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientTagGroupsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientTagEvents:
      properties:
        tag-groups-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientTagGroupsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientTagGroupsSubscribeReply"
          required:
            - body
            - reply
          type: object
        tag-groups-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientTagGroupsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tags-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientTagsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientTagsSubscribeReply"
          required:
            - body
            - reply
          type: object
        tags-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientTagsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - tag-groups-subscribe
        - tag-groups-unsubscribe
        - tags-subscribe
        - tags-unsubscribe
      type: object
    SocketServerTagAddedBody:
      properties:
        subscriptionId:
          type: string
        tag:
          $ref: "#/components/schemas/Tag"
      required:
        - subscriptionId
        - tag
      type: object
    SocketServerTagModifiedBody:
      properties:
        subscriptionId:
          type: string
        tag:
          $ref: "#/components/schemas/Tag"
      required:
        - subscriptionId
        - tag
      type: object
    SocketServerTagRemovedBody:
      properties:
        subscriptionId:
          type: string
        tag:
          $ref: "#/components/schemas/Tag"
      required:
        - subscriptionId
        - tag
      type: object
    SocketServerTagsBody:
      properties:
        subscriptionId:
          type: string
        tags:
          items:
            $ref: "#/components/schemas/Tag"
          type: array
      required:
        - subscriptionId
        - tags
      type: object
    SocketServerTagGroupAddedBody:
      properties:
        subscriptionId:
          type: string
        tagGroup:
          $ref: "#/components/schemas/TagGroup"
      required:
        - subscriptionId
        - tagGroup
      type: object
    SocketServerTagGroupModifiedBody:
      properties:
        subscriptionId:
          type: string
        tagGroup:
          $ref: "#/components/schemas/TagGroup"
      required:
        - subscriptionId
        - tagGroup
      type: object
    SocketServerTagGroupRemovedBody:
      properties:
        subscriptionId:
          type: string
        tagGroup:
          $ref: "#/components/schemas/TagGroup"
      required:
        - subscriptionId
        - tagGroup
      type: object
    SocketServerTagGroupsBody:
      properties:
        subscriptionId:
          type: string
        tagGroups:
          items:
            $ref: "#/components/schemas/TagGroup"
          type: array
      required:
        - subscriptionId
        - tagGroups
      type: object
    SocketServerTagEvents:
      properties:
        tag-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tag-group-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagGroupAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tag-group-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagGroupModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tag-group-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagGroupRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tag-groups:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagGroupsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tag-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tag-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tags:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTagsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - tag-added
        - tag-group-added
        - tag-group-modified
        - tag-group-removed
        - tag-groups
        - tag-modified
        - tag-removed
        - tags
      type: object
    SocketClientToursSubscribeBody:
      properties:
        landscapeId:
          type: string
        versionId:
          type: string
      required:
        - landscapeId
        - versionId
      type: object
    SocketClientToursSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientToursUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientTourEvents:
      properties:
        tours-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientToursSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientToursSubscribeReply"
          required:
            - body
            - reply
          type: object
        tours-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientToursUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - tours-subscribe
        - tours-unsubscribe
      type: object
    SocketServerToursBody:
      properties:
        subscriptionId:
          type: string
        tours:
          items:
            $ref: "#/components/schemas/Tour"
          type: array
      required:
        - tours
        - subscriptionId
      type: object
    SocketServerTourAddedBody:
      properties:
        subscriptionId:
          type: string
        tour:
          $ref: "#/components/schemas/Tour"
      required:
        - tour
        - subscriptionId
      type: object
    SocketServerTourModifiedBody:
      properties:
        subscriptionId:
          type: string
        tour:
          $ref: "#/components/schemas/Tour"
      required:
        - tour
        - subscriptionId
      type: object
    SocketServerTourRemovedBody:
      properties:
        subscriptionId:
          type: string
        tour:
          $ref: "#/components/schemas/Tour"
      required:
        - tour
        - subscriptionId
      type: object
    SocketServerTourEvents:
      properties:
        tour-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTourAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tour-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTourModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tour-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerTourRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        tours:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerToursBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - tour-added
        - tour-modified
        - tour-removed
        - tours
      type: object
    SocketClientVersionsSubscribeBody:
      properties:
        landscapeId:
          type: string
      required:
        - landscapeId
      type: object
    SocketClientVersionsSubscribeReply:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientVersionsUnsubscribeBody:
      properties:
        subscriptionId:
          type: string
      required:
        - subscriptionId
      type: object
    SocketClientVersionEvents:
      properties:
        versions-subscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientVersionsSubscribeBody"
            reply:
              $ref: "#/components/schemas/SocketClientVersionsSubscribeReply"
          required:
            - body
            - reply
          type: object
        versions-unsubscribe:
          properties:
            body:
              $ref: "#/components/schemas/SocketClientVersionsUnsubscribeBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - versions-subscribe
        - versions-unsubscribe
      type: object
    SocketServerVersionsBody:
      properties:
        subscriptionId:
          type: string
        versions:
          items:
            $ref: "#/components/schemas/Version"
          type: array
      required:
        - versions
        - subscriptionId
      type: object
    SocketServerVersionAddedBody:
      properties:
        subscriptionId:
          type: string
        version:
          $ref: "#/components/schemas/Version"
      required:
        - version
        - subscriptionId
      type: object
    SocketServerVersionModifiedBody:
      properties:
        subscriptionId:
          type: string
        version:
          $ref: "#/components/schemas/Version"
      required:
        - version
        - subscriptionId
      type: object
    SocketServerVersionRemovedBody:
      properties:
        subscriptionId:
          type: string
        version:
          $ref: "#/components/schemas/Version"
      required:
        - version
        - subscriptionId
      type: object
    SocketServerVersionEvents:
      properties:
        version-added:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerVersionAddedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        version-modified:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerVersionModifiedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        version-removed:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerVersionRemovedBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
        versions:
          properties:
            body:
              $ref: "#/components/schemas/SocketServerVersionsBody"
            reply:
              type: object
          required:
            - body
            - reply
          type: object
      required:
        - version-added
        - version-modified
        - version-removed
        - versions
      type: object
    AuthType:
      enum:
        - user
        - api-key
        - service
      type: string
    PermissionType:
      enum:
        - billing
        - read
        - write
        - admin
      type: string
    BackstageAPI:
      type: object
      description:
        An API describes an interface that can be exposed by a component.
        The API can be defined in different formats, like OpenAPI, AsyncAPI,
        GraphQL, gRPC, or other formats.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: API
          metadata:
            name: artist-api
            description: Retrieve artist details
            labels:
              product_name: Random value Generator
            annotations:
              docs: https://github.com/..../tree/develop/doc
          spec:
            type: openapi
            lifecycle: production
            owner: artist-relations-team
            system: artist-engagement-portal
            definition: |-
              openapi: "3.0.0"
              info:...
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - API
        spec:
          type: object
          required:
            - type
            - lifecycle
            - owner
            - definition
          properties:
            type:
              type: string
              description: The type of the API definition.
              example:
                - openapi
                - asyncapi
                - graphql
                - grpc
              minimum: 1
            lifecycle:
              type: string
              description: The lifecycle state of the API.
              example:
                - experimental
                - production
                - deprecated
              minimum: 1
            owner:
              type: string
              description: An entity reference to the owner of the API.
              example:
                - artist-relations-team
                - user:john.johnson
              minimum: 1
            system:
              type: string
              description: An entity reference to the system that the API belongs to.
              minimum: 1
            definition:
              type: string
              description: The definition of the API, based on the format defined by the type.
              minimum: 1
    BackstageComponent:
      type: object
      description: A Component describes a software component. It is typically
        intimately linked to the source code that constitutes the component, and
        should be what a developer may regard a "unit of software", usually with
        a distinct deployable or linkable artifact.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: Component
          metadata:
            name: LoremService
            description: Creates Lorems like a pro.
            labels:
              product_name: Random value Generator
            annotations:
              docs: https://github.com/..../tree/develop/doc
          spec:
            type: service
            lifecycle: production
            owner: tools
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - Component
        spec:
          type: object
          required:
            - type
            - lifecycle
            - owner
          properties:
            type:
              type: string
              description: The type of component.
              example:
                - service
                - website
                - library
              minimum: 1
            lifecycle:
              type: string
              description: The lifecycle state of the component.
              example:
                - experimental
                - production
                - deprecated
              minimum: 1
            owner:
              type: string
              description: An entity reference to the owner of the component.
              example:
                - artist-relations-team
                - user:john.johnson
              minimum: 1
            system:
              type: string
              description: An entity reference to the system that the component belongs to.
              minimum: 1
            subcomponentOf:
              type: string
              description:
                An entity reference to another component of which the component is
                a part.
              minimum: 1
            providesApis:
              type: array
              description:
                An array of entity references to the APIs that are provided by the
                component.
              items:
                type: string
                minimum: 1
            consumesApis:
              type: array
              description:
                An array of entity references to the APIs that are consumed by the
                component.
              items:
                type: string
                minimum: 1
            dependsOn:
              type: array
              description:
                An array of references to other entities that the component depends
                on to function.
              items:
                type: string
                minimum: 1
    BackstageDomain:
      type: object
      description:
        A Domain groups a collection of systems that share terminology,
        domain models, business purpose, or documentation, i.e. form a bounded
        context.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: Domain
          metadata:
            name: artists
            description: Everything about artists
          spec:
            owner: artist-relations-team
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - Domain
        spec:
          type: object
          required:
            - owner
          properties:
            owner:
              type: string
              description: An entity reference to the owner of the component.
              example:
                - artist-relations-team
                - user:john.johnson
              minimum: 1
    BackstageEntity:
      description: The parts of the format that's common to all versions/kinds of entity.
      type: object
      additionalProperties: false
      oneOf:
        - $ref: "#/components/schemas/BackstageAPI"
        - $ref: "#/components/schemas/BackstageComponent"
        - $ref: "#/components/schemas/BackstageDomain"
        - $ref: "#/components/schemas/BackstageResource"
        - $ref: "#/components/schemas/BackstageSystem"
    BackstageEntityMap:
      description: The parts of the format that's common to all versions/kinds of entity.
      type: object
      additionalProperties: false
      properties:
        apis:
          type: array
          items:
            $ref: "#/components/schemas/BackstageAPI"
        components:
          type: array
          items:
            $ref: "#/components/schemas/BackstageComponent"
        domains:
          type: array
          items:
            $ref: "#/components/schemas/BackstageDomain"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/BackstageResource"
        systems:
          type: array
          items:
            $ref: "#/components/schemas/BackstageSystem"
    BackstageEntityMeta:
      description: Metadata fields common to all versions/kinds of entity.
      example:
        - uid: e01199ab-08cc-44c2-8e19-5c29ded82521
          etag: lsndfkjsndfkjnsdfkjnsd==
          name: my-component-yay
          namespace: the-namespace
          labels:
            backstage.io/custom: ValueStuff
          annotations:
            example.com/bindings: are-secret
          tags:
            - java
            - data
      type: object
      required:
        - name
      additionalProperties: true
      properties:
        uid:
          type: string
          description:
            A globally unique ID for the entity. This field can not be set by
            the user at creation time, and the server will reject an attempt to
            do so. The field will be populated in read operations. The field can
            (optionally) be specified when performing update or delete
            operations, but the server is free to reject requests that do so in
            such a way that it breaks semantics.
          example:
            - e01199ab-08cc-44c2-8e19-5c29ded82521
          minimum: 1
        etag:
          type: string
          description:
            An opaque string that changes for each update operation to any part
            of the entity, including metadata. This field can not be set by the
            user at creation time, and the server will reject an attempt to do
            so. The field will be populated in read operations. The field can
            (optionally) be specified when performing update or delete
            operations, and the server will then reject the operation if it does
            not match the current stored value.
          example:
            - lsndfkjsndfkjnsdfkjnsd==
          minimum: 1
        name:
          type: string
          description:
            The name of the entity. Must be unique within the catalog at any
            given point in time, for any given namespace + kind pair.
          example:
            - metadata-proxy
          minimum: 1
        namespace:
          type: string
          description: The namespace that the entity belongs to.
          default: default
          example:
            - default
            - admin
          minimum: 1
        title:
          type: string
          description:
            A display name of the entity, to be presented in user interfaces
            instead of the name property, when available.
          example:
            - React SSR Template
          minimum: 1
        description:
          type: string
          description:
            A short (typically relatively few words, on one line) description
            of the entity.
        labels:
          type: object
          description: Key/value pairs of identifying information attached to the entity.
          additionalProperties: true
        annotations:
          type: object
          description:
            Key/value pairs of non-identifying auxiliary information attached
            to the entity.
          nullable: true
          additionalProperties: true
        tags:
          type: array
          description:
            A list of single-valued strings, to for example classify catalog
            entities in various ways.
          items:
            type: string
            minimum: 1
        links:
          type: array
          description:
            A list of external hyperlinks related to the entity. Links can
            provide additional contextual information that may be located
            outside of Backstage itself. For example, an admin dashboard or
            external CMS page.
          items:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                description: A url in a standard uri format.
                example:
                  - https://admin.example-org.com
                minimum: 1
              title:
                type: string
                description: A user friendly display name for the link.
                example:
                  - Admin Dashboard
                minimum: 1
              icon:
                type: string
                description: A key representing a visual icon to be displayed in the UI.
                example:
                  - dashboard
                minimum: 1
              type:
                type: string
                description: An optional value to categorize links into specific groups.
                example:
                  - runbook
                  - documentation
                  - logs
                  - dashboard
                minimum: 1
    BackstageError:
      type: object
      description: A serialized error object.
      required:
        - name
        - message
      additionalProperties: true
      properties:
        name:
          type: string
          example:
            - Error
            - InputError
          description: The type name of the error
          minimum: 1
        message:
          type: string
          description: The message of the error
        code:
          type: string
          description: An error code associated with the error
        stack:
          type: string
          description: An error stack trace
    BackstageGroup:
      type: object
      description:
        A group describes an organizational entity, such as for example a
        team, a business unit, or a loose collection of people in an interest
        group. Members of these groups are modeled in the catalog as kind User.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: Group
          metadata:
            name: infrastructure
            description: The infra business unit
          spec:
            type: business-unit
            profile:
              displayName: Infrastructure
              email: infrastructure@example.com
              picture: https://example.com/groups/bu-infrastructure.jpeg
            parent: ops
            children:
              - backstage
              - other
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - Group
        spec:
          type: object
          required:
            - type
            - children
          properties:
            type:
              type: string
              description:
                The type of group. There is currently no enforced set of values for
                this field, so it is left up to the adopting organization to
                choose a nomenclature that matches their org hierarchy.
              example:
                - team
                - business-unit
                - product-area
                - root
              minimum: 1
            profile:
              type: object
              description:
                Optional profile information about the group, mainly for display
                purposes. All fields of this structure are also optional. The
                email would be a group email of some form, that the group may
                wish to be used for contacting them. The picture is expected to
                be a URL pointing to an image that's representative of the
                group, and that a browser could fetch and render on a group page
                or similar.
              properties:
                displayName:
                  type: string
                  description: A simple display name to present to users.
                  example:
                    - Infrastructure
                  minimum: 1
                email:
                  type: string
                  description: An email where this entity can be reached.
                  example:
                    - infrastructure@example.com
                  minimum: 1
                picture:
                  type: string
                  description: The URL of an image that represents this entity.
                  example:
                    - https://example.com/groups/bu-infrastructure.jpeg
                  minimum: 1
            parent:
              type: string
              description:
                The immediate parent group in the hierarchy, if any. Not all groups
                must have a parent; the catalog supports multi-root hierarchies.
                Groups may however not have more than one parent. This field is
                an entity reference.
              example:
                - ops
              minimum: 1
            children:
              type: array
              description:
                The immediate child groups of this group in the hierarchy (whose
                parent field points to this group). The list must be present,
                but may be empty if there are no child groups. The items are not
                guaranteed to be ordered in any particular way. The entries of
                this array are entity references.
              items:
                type: string
                example:
                  - backstage
                  - other
                minimum: 1
            members:
              type: array
              description:
                The users that are members of this group. The entries of this array
                are entity references.
              items:
                type: string
                example:
                  - jdoe
                minimum: 1
    BackstageLocation:
      type: object
      description:
        A location is a marker that references other places to look for
        catalog data.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: Location
          metadata:
            name: org-data
          spec:
            type: url
            targets:
              - http://github.com/myorg/myproject/org-data-dump/catalog-info-staff.yaml
              - http://github.com/myorg/myproject/org-data-dump/catalog-info-consultants.yaml
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - Location
        spec:
          type: object
          properties:
            type:
              type: string
              description:
                The single location type, that's common to the targets specified in
                the spec. If it is left out, it is inherited from the location
                type that originally read the entity data.
              example:
                - url
              minimum: 1
            target:
              type: string
              description:
                A single target as a string. Can be either an absolute path/URL
                (depending on the type), or a relative path such as
                ./details/catalog-info.yaml which is resolved relative to the
                location of this Location entity itself.
              example:
                - ./details/catalog-info.yaml
              minimum: 1
            targets:
              type: array
              description:
                A list of targets as strings. They can all be either absolute
                paths/URLs (depending on the type), or relative paths such as
                ./details/catalog-info.yaml which are resolved relative to the
                location of this Location entity itself.
              items:
                type: string
                example:
                  - ./details/catalog-info.yaml
                  - http://github.com/myorg/myproject/org-data-dump/catalog-info-staff.yaml
                minimum: 1
            presence:
              type: string
              description:
                Whether the presence of the location target is required and it
                should be considered an error if it can not be found
              default: required
              example:
                - required
              enum:
                - required
                - optional
    BackstageReference:
      type: object
      description: A reference by name to another entity.
      required:
        - kind
        - namespace
        - name
      additionalProperties: false
      properties:
        kind:
          type: string
          description: The kind field of the entity.
          minimum: 1
        namespace:
          type: string
          description: The metadata.namespace field of the entity.
          minimum: 1
        name:
          type: string
          description: The metadata.name field of the entity.
          minimum: 1
    BackstageRelation:
      type: object
      description: A directed relation from one entity to another.
      required:
        - type
        - target
      additionalProperties: false
      properties:
        type:
          type: string
          minimum: 1
          pattern: ^\w+$
          description: The type of relation.
        target:
          $ref: "#/components/schemas/BackstageReference"
        targetRef:
          type: string
          minimum: 1
          description: The entity ref of the target of this relation.
    BackstageResource:
      type: object
      description:
        A resource describes the infrastructure a system needs to operate,
        like BigTable databases, Pub/Sub topics, S3 buckets or CDNs. Modelling
        them together with components and systems allows to visualize resource
        footprint, and create tooling around them.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: Resource
          metadata:
            name: artists-db
            description: Stores artist details
          spec:
            type: database
            owner: artist-relations-team
            system: artist-engagement-portal
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - Resource
        spec:
          type: object
          required:
            - type
            - owner
          properties:
            type:
              type: string
              description: The type of resource.
              example:
                - database
                - s3-bucket
                - cluster
              minimum: 1
            owner:
              type: string
              description: An entity reference to the owner of the resource.
              example:
                - artist-relations-team
                - user:john.johnson
              minimum: 1
            dependsOn:
              type: array
              description:
                An array of references to other entities that the resource depends
                on to function.
              items:
                type: string
                minimum: 1
            system:
              type: string
              description: An entity reference to the system that the resource belongs to.
              minimum: 1
    BackstageStatus:
      type: object
      description: The current status of the entity, as claimed by various sources.
      additionalProperties: true
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/BackstageStatusItem"
    BackstageStatusItem:
      type: object
      description: A specific status item on a well known format.
      required:
        - type
        - level
        - message
      additionalProperties: true
      properties:
        type:
          type: string
          minimum: 1
        level:
          $ref: "#/components/schemas/BackstageStatusLevel"
          description: The status level / severity of the status item.
        message:
          type: string
          description: A brief message describing the status, intended for human
            consumption.
        error:
          $ref: "#/components/schemas/BackstageError"
          description: An optional serialized error object related to the status.
    BackstageStatusLevel:
      type: string
      description: A status level / severity.
      enum:
        - info
        - warning
        - error
    BackstageSystem:
      type: object
      description:
        A system is a collection of resources and components. The system
        may expose or consume one or several APIs. It is viewed as abstraction
        level that provides potential consumers insights into exposed features
        without needing a too detailed view into the details of all components.
        This also gives the owning team the possibility to decide about
        published artifacts and APIs.
      example:
        - apiVersion: backstage.io/v1alpha1
          kind: System
          metadata:
            name: artist-engagement-portal
            description: Handy tools to keep artists in the loop
          spec:
            owner: artist-relations-team
            domain: artists
      required:
        - apiVersion
        - metadata
        - kind
        - spec
      properties:
        metadata:
          $ref: "#/components/schemas/BackstageEntityMeta"
        relations:
          type: array
          description: The relations that this entity has with other entities.
          items:
            $ref: "#/components/schemas/BackstageRelation"
        status:
          $ref: "#/components/schemas/BackstageStatus"
        apiVersion:
          type: string
          enum:
            - backstage.io/v1alpha1
            - backstage.io/v1beta1
        kind:
          type: string
          enum:
            - System
        spec:
          type: object
          required:
            - owner
          properties:
            owner:
              type: string
              description: An entity reference to the owner of the component.
              example:
                - artist-relations-team
                - user:john.johnson
              minimum: 1
            domain:
              type: string
              description: An entity reference to the domain that the system belongs to.
              example:
                - artists
              minimum: 1
    EditorLocationUpdate:
      properties:
        diagramId:
          type: string
        versionId:
          type: string
        x:
          type: number
        y:
          type: number
      type: object
    EditorLocation:
      properties:
        diagramId:
          type: string
        versionId:
          type: string
        x:
          type: number
        y:
          type: number
        publishedAt:
          type: number
        userId:
          type: string
      required:
        - publishedAt
        - userId
      type: object
    EditorTypingUpdate:
      properties:
        id:
          type: string
        value:
          type: string
      type: object
    EditorTyping:
      properties:
        id:
          type: string
        value:
          type: string
        publishedAt:
          type: number
        userId:
          type: string
      required:
        - publishedAt
        - userId
      type: object
    Error:
      properties:
        code:
          type: string
        errors:
          items:
            type: string
          type: array
        message:
          type: string
      required:
        - message
      type: object
    ExportDomain:
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      type: object
    ExportFlowStep:
      properties:
        description:
          type: string
        id:
          type: string
        index:
          type: number
        originId:
          type: string
        targetId:
          type: string
        type:
          $ref: "#/components/schemas/FlowStepType"
        viaId:
          type: string
      required:
        - description
        - id
        - index
        - originId
        - targetId
        - type
        - viaId
      type: object
    ExportFlow:
      properties:
        id:
          type: string
        name:
          type: string
        showConnectionNames:
          type: boolean
        steps:
          additionalProperties:
            $ref: "#/components/schemas/ExportFlowStep"
          type: object
      required:
        - id
        - name
        - showConnectionNames
        - steps
      type: object
    ExportModelConnection:
      properties:
        description:
          type: string
        direction:
          $ref: "#/components/schemas/ModelConnectionDirection"
        id:
          type: string
        name:
          type: string
        originId:
          type: string
        status:
          $ref: "#/components/schemas/ModelConnectionStatus"
        tagIds:
          items:
            type: string
          type: array
        targetId:
          type: string
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelConnectionTechnology"
          type: object
      required:
        - description
        - direction
        - id
        - name
        - originId
        - status
        - tagIds
        - targetId
        - technologies
      type: object
    ExportModelObject:
      properties:
        caption:
          type: string
        domainId:
          type: string
        external:
          type: boolean
        icon:
          $ref: "#/components/schemas/ModelObjectIconNullable"
        id:
          type: string
        links:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectLink"
          type: object
        name:
          type: string
        parentId:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/ModelObjectStatus"
        tagIds:
          items:
            type: string
          type: array
        teamIds:
          items:
            type: string
          type: array
        technologies:
          additionalProperties:
            $ref: "#/components/schemas/ModelObjectTechnology"
          type: object
        type:
          $ref: "#/components/schemas/ModelObjectType"
      required:
        - caption
        - domainId
        - external
        - icon
        - id
        - links
        - name
        - parentId
        - status
        - tagIds
        - teamIds
        - technologies
        - type
      type: object
    ExportTag:
      properties:
        color:
          type: string
        groupId:
          type: string
        id:
          type: string
        name:
          type: string
      required:
        - color
        - groupId
        - id
        - name
      type: object
    ExportTagGroup:
      properties:
        icon:
          type: string
        id:
          type: string
        name:
          type: string
      required:
        - icon
        - id
        - name
      type: object
    ExportTeam:
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      type: object
    Export:
      properties:
        domains:
          additionalProperties:
            $ref: "#/components/schemas/ExportDomain"
          type: object
        flows:
          additionalProperties:
            $ref: "#/components/schemas/ExportFlow"
          type: object
        modelConnections:
          additionalProperties:
            $ref: "#/components/schemas/ExportModelConnection"
          type: object
        modelObjects:
          additionalProperties:
            $ref: "#/components/schemas/ExportModelObject"
          type: object
        tagGroups:
          additionalProperties:
            $ref: "#/components/schemas/ExportTagGroup"
          type: object
        tags:
          additionalProperties:
            $ref: "#/components/schemas/ExportTag"
          type: object
        teams:
          additionalProperties:
            $ref: "#/components/schemas/ExportTeam"
          type: object
      required:
        - domains
        - flows
        - modelConnections
        - modelObjects
        - tagGroups
        - tags
        - teams
      type: object
    HealthCheckStatus:
      enum:
        - ok
        - degraded
        - down
      type: string
    HealthCheckService:
      properties:
        id:
          type: string
        message:
          type: string
        status:
          $ref: "#/components/schemas/HealthCheckStatus"
      required:
        - id
        - status
      type: object
    HealthCheck:
      properties:
        id:
          type: string
        location:
          type: string
        ok:
          type: boolean
        services:
          additionalProperties:
            $ref: "#/components/schemas/HealthCheckService"
          type: object
      required:
        - id
        - ok
        - services
      type: object
    StructurizrAnimationStep:
      type: object
      description: An animation step
      properties:
        order:
          type: number
          format: integer
          description: The order of this animation step.
        elements:
          type: array
          description:
            The set of element IDs that should be included in this animation
            step.
          items:
            type: string
        relationships:
          type: array
          description:
            The set of relationship IDs that should be included in this
            animation step.
          items:
            type: string
    StructurizrAPIResponse:
      type: object
      description: An API response.
      properties:
        success:
          type: boolean
          description: true if the API call was successful, false otherwise.
        message:
          type: string
          description: A human readable response message.
        revision:
          type: integer
          description: The internal revision number.
    StructurizrAutomaticLayout:
      type: object
      description: Represents the auto-layout configuration for a given view.
      properties:
        rankDirection:
          type: string
          description: The algorithm rank direction.
          enum:
            - TopBottom
            - BottomTop
            - LeftRight
            - RightLeft
        rankSeparation:
          type: number
          format: integer
          description: The separation between ranks (pixels).
        nodeSeparation:
          type: number
          format: integer
          description: The separation between nodes in the same rank (pixels).
        edgeSeparation:
          type: number
          format: integer
          description: The separation between edges (pixels).
        vertices:
          type: boolean
          description: Whether vertices should be created during automatic layout.
    StructurizrBranding:
      type: object
      description:
        A wrapper for the font and logo for diagram/documentation branding
        purposes.
      properties:
        logo:
          type: string
          format: url
          description: A Base64 data URI representation of a PNG/JPG/GIF file.
        font:
          type: object
          description:
            Represents a font, including a name and an optional URL for web
            fonts.
          properties:
            name:
              type: string
              description: The font name (e.g. "Times New Roman", "Open Sans", etc).
            url:
              type: string
              format: url
              description: For web fonts, the URL where the font can be found.
    StructurizrCodeElement:
      type: object
      description: A component view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        containerId:
          type: string
          description: The ID of the container this view is associated with.
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        elements:
          type: array
          description: The set of elements in this views.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this views.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        animations:
          type: array
          description: The set of animation steps (optional).
          items:
            $ref: "#/components/schemas/StructurizrAnimationStep"
        externalContainerBoundariesVisible:
          type: boolean
          description:
            Specifies whether container boundaries should be visible for
            "external" components (those outside the container in scope).
    StructurizrComponent:
      type: object
      description: A component (a grouping of related functionality behind an
        interface that runs inside a container).
      properties:
        id:
          type: string
          description: The ID of this component in the model.
        name:
          type: string
          description: The name of this component.
        description:
          type: string
          description: A short description of this component.
        technology:
          type: string
          description: The technology associated with this component (e.g. Spring Bean).
        tags:
          type: string
          description: A comma separated list of tags associated with this component.
        url:
          type: string
          description: The URL where more information about this element can be found.
        group:
          type: string
          description: The name of the group in which this component should be included in.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description: The set of relationships from this component to other elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
        documentation:
          $ref: "#/components/schemas/StructurizrDocumentation"
    StructurizrComponentView:
      type: object
      description: A component view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        containerId:
          type: string
          description: The ID of the container this view is associated with.
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        elements:
          type: array
          description: The set of elements in this views.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this views.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        animations:
          type: array
          description: The set of animation steps (optional).
          items:
            $ref: "#/components/schemas/StructurizrAnimationStep"
        externalContainerBoundariesVisible:
          type: boolean
          description:
            Specifies whether container boundaries should be visible for
            "external" components (those outside the container in scope).
    StructurizrConfiguration:
      type: object
      description: The configuration associated with a set of views.
      properties:
        styles:
          type: object
          description: The styles associated with this set of views.
          properties:
            elements:
              type: array
              description: The set of element styles.
              items:
                $ref: "#/components/schemas/StructurizrElementStyle"
            relationships:
              type: array
              description: The set of relationship styles.
              items:
                $ref: "#/components/schemas/StructurizrRelationshipStyle"
        lastSavedView:
          type: string
          description: The key of the view that was saved most recently.
        defaultView:
          type: string
          description: The key of the view that should be shown by default.
        themes:
          type: array
          description: The URL(s) of the theme(s) to be used when rendering diagrams.
          items:
            type: string
        branding:
          $ref: "#/components/schemas/StructurizrBranding"
        terminology:
          $ref: "#/components/schemas/StructurizrTerminology"
        metadataSymbols:
          type: string
          description: The type of symbols to use when rendering metadata.
          enum:
            - SquareBrackets
            - RoundBrackets
            - CurlyBrackets
            - AngleBrackets
            - DoubleAngleBrackets
            - None
    StructurizrContainer:
      type: object
      description: A container (something that can execute code or host data).
      properties:
        id:
          type: string
          description: The ID of this container in the model.
        name:
          type: string
          description: The name of this container.
        description:
          type: string
          description: A short description of this container.
        technology:
          type: string
          description: The technology associated with this container (e.g. Apache Tomcat).
        tags:
          type: string
          description: A comma separated list of tags associated with this container.
        url:
          type: string
          description: The URL where more information about this element can be found.
        components:
          type: array
          description: The set of components within this container.
          items:
            $ref: "#/components/schemas/StructurizrComponent"
        group:
          type: string
          description: The name of the group in which this container should be included in.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description: The set of relationships from this container to other elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
        documentation:
          $ref: "#/components/schemas/StructurizrDocumentation"
    StructurizrContainerInstance:
      type: object
      description: An instance of a container, running on a deployment node.
      properties:
        id:
          type: string
          description: The ID of this container instance in the model.
        containerId:
          type: string
          description: The ID of the container this is an instance of.
        instanceId:
          type: number
          description: The number/index of this instance.
        environment:
          type: string
          description:
            The deployment environment in which this container instance resides
            (e.g. "Development", "Live", etc).
        tags:
          type: string
          description:
            A comma separated list of tags associated with this container
            instance.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description:
            The set of relationships from this container instance to other
            elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
        healthChecks:
          type: array
          description: The set of HTTP-based health checks for this container instance.
          items:
            $ref: "#/components/schemas/StructurizrHttpHealthCheck"
    StructurizrContainerView:
      type: object
      description: A container view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        softwareSystemId:
          type: string
          description: The ID of the software system this view is associated with.
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        elements:
          type: array
          description: The set of elements in this views.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this views.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        animations:
          type: array
          description: The set of animation steps (optional).
          items:
            $ref: "#/components/schemas/StructurizrAnimationStep"
        externalSoftwareSystemBoundariesVisible:
          type: boolean
          description:
            Specifies whether software system boundaries should be visible for
            "external" containers (those outside the software system in scope).
    StructurizrDecision:
      type: object
      description: A decision record (e.g. architecture decision record).
      properties:
        id:
          type: string
          description: The ID of the decision.
        date:
          type: string
          description: The date that the decision was made (ISO 8601 format).
        status:
          type: string
          description: The status of the decision.
          enum:
            - Proposed
            - Accepted
            - Superseded
            - Deprecated
            - Rejected
        title:
          type: string
          description: The title of the decision.
        content:
          type: string
          description: The Markdown or AsciiDoc content of the section.
        format:
          type: string
          description: The content format type.
          enum:
            - Markdown
            - AsciiDoc
        elementId:
          type: string
          description:
            The ID of the element (in the model) that this decision applies to
            (optional).
    StructurizrDeploymentNode:
      type: object
      description: A deployment node.
      properties:
        id:
          type: string
          description: The ID of this deployment node in the model.
        name:
          type: string
          description: The name of this deployment node.
        description:
          type: string
          description: A short description of this deployment node.
        technology:
          type: string
          description:
            The technology associated with this deployment node (e.g. Apache
            Tomcat).
        environment:
          type: string
          description:
            The deployment environment in which this deployment node resides
            (e.g. "Development", "Live", etc).
        instances:
          type: string
          description:
            The number of instances; either a number (e.g. 1, 2, etc) or a
            range (e.g. 0..N, 0..*, 1..3, etc).
        tags:
          type: string
          description: A comma separated list of tags associated with this deployment node.
        url:
          type: string
          description: The URL where more information about this element can be found.
        children:
          type: array
          description: The set of child/nested deployment nodes.
          items:
            $ref: "#/components/schemas/StructurizrDeploymentNode"
        infrastructureNodes:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrInfrastructureNode"
        softwareSystemInstances:
          type: array
          description:
            The set of software systems instances running in this deployment
            node..
          items:
            $ref: "#/components/schemas/StructurizrSoftwareSystemInstance"
        containerInstances:
          type: array
          description: The set of container instances running in this deployment node..
          items:
            $ref: "#/components/schemas/StructurizrContainerInstance"
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description: The set of relationships from this deployment node to other elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
    StructurizrDeploymentView:
      type: object
      description: A deployment view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        softwareSystemId:
          type: string
          description:
            The ID of the software system this view is associated with
            (optional).
        environment:
          type: string
          description:
            The name of the environment that this deployment view is for (e.g.
            "Development", "Live", etc).
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        elements:
          type: array
          description: The set of elements in this views.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this views.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        animations:
          type: array
          description: The set of animation steps (optional).
          items:
            $ref: "#/components/schemas/StructurizrAnimationStep"
    StructurizrDimensions:
      type: object
      description: Represents a width and height pair.
      properties:
        width:
          type: number
          format: integer
          description: The width (pixels).
        height:
          type: number
          format: integer
          description: The height (pixels).
    StructurizrDocumentation:
      type: object
      description: A wrapper for documentation.
      properties:
        sections:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrDocumentationSection"
        decisions:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrDecision"
        images:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrImage"
    StructurizrDocumentationSection:
      type: object
      description: A documentation section.
      properties:
        content:
          type: string
          description: The Markdown or AsciiDoc content of the section.
        format:
          type: string
          description: The content format type.
          enum:
            - Markdown
            - AsciiDoc
        order:
          type: number
          format: integer
          description: The order (index) of the section in the document.
    StructurizrDynamicView:
      type: object
      description: A dynamic view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: An identifier for this view.
        elementId:
          type: string
          description: The ID of the element this view is associated with (optional).
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        elements:
          type: array
          description: The set of elements in this views.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this views.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        externalBoundariesVisible:
          type: boolean
          description:
            Specifies software system/container boundaries should be visible
            for "external" containers/components (those outside the element in
            scope)
    StructurizrElementStyle:
      type: object
      description: A definition of an element style.
      properties:
        tag:
          type: string
          description: The tag to which this element style applies.
        width:
          type: number
          format: integer
          description: The width of the element, in pixels.
        height:
          type: number
          format: integer
          description: The height of the element, in pixels.
        background:
          type: string
          description:
            The background colour of the element, as a HTML RGB hex string
            (e.g. '#ffffff').
        stroke:
          type: string
          description:
            The stroke colour of the element, as a HTML RGB hex string (e.g.
            '#000000').
        strokeWidth:
          type: number
          format: integer
          description: The width of the stroke, in pixels.
        color:
          type: string
          description:
            The foreground (text) colour of the element, as a HTML RGB hex
            string (e.g. '#ffffff').
        fontSize:
          type: number
          format: integer
          description: The standard font size used to render text, in pixels.
        shape:
          type: string
          description: The shape used to render the element.
          enum:
            - Box
            - RoundedBox
            - Component
            - Circle
            - Ellipse
            - Hexagon
            - Diamond
            - Folder
            - Cylinder
            - Pipe
            - WebBrowser
            - Window
            - MobileDevicePortrait
            - MobileDeviceLandscape
            - Person
            - Robot
        icon:
          type: string
          description: A Base64 data URI representation of a PNG/JPG/GIF file.
        border:
          type: string
          description: The type of border used to render the element.
          enum:
            - Solid
            - Dashed
            - Dotted
        opacity:
          type: number
          format: integer
          description: The opacity used when rendering the element; 0-100.
        metadata:
          type: boolean
          description: Whether the element metadata should be shown or not.
        description:
          type: boolean
          description: Whether the element description should be shown or not.
    StructurizrElementView:
      type: object
      description:
        An instance of a model element (Person, Software System, Container
        or Component) in a View.
      properties:
        id:
          type: string
          description: The ID of the element.
        x:
          type: number
          format: integer
          description: The horizontal position of the element when rendered.
        y:
          type: number
          format: integer
          description: The vertical position of the element when rendered.
    StructurizrFilteredView:
      type: object
      description:
        Represents a view on top of a view, which can be used to include or
        exclude specific elements.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        baseViewKey:
          type: string
          description: The key of the view on which this filtered view is based.
        mode:
          type: string
          description:
            Whether elements/relationships are being included or excluded based
            upon the set of tags.
          enum:
            - Include
            - Exclude
        tags:
          type: array
          description:
            The set of tags to include/exclude elements/relationships when
            rendering this filtered view.
          items:
            type: string
    StructurizrHttpHealthCheck:
      type: object
      description: Describes a HTTP based health check.
      properties:
        name:
          type: string
          description: The name of the health check.
        url:
          type: string
          description: The health check URL/endpoint.
        interval:
          type: number
          format: integer
          description: The polling interval, in seconds.
        timeout:
          type: number
          format: integer
          description:
            The timeout after which a health check is deemed as failed, in
            milliseconds.
        headers:
          type: object
          description:
            A set of name-value pairs corresponding to HTTP headers that should
            be sent with the request.
          additionalProperties: true
    StructurizrImage:
      type: object
      description: Represents a base64 encoded image (png/jpg/gif).
      properties:
        name:
          type: string
          description: The name of the image.
        content:
          type: string
          description: The (base64 encoded) content of the image.
        type:
          type: string
          description: The image MIME type (e.g. "image/png").
    StructurizrInfrastructureNode:
      type: object
      description: An infrastructure node.
      properties:
        id:
          type: string
          description: The ID of this infrastructure node in the model.
        name:
          type: string
          description: The name of this infrastructure node.
        description:
          type: string
          description: A short description of this infrastructure node.
        technology:
          type: string
          description:
            The technology associated with this infrastructure node (e.g.
            "Route 53").
        environment:
          type: string
          description:
            The deployment environment in which this infrastructure node
            resides (e.g. "Development", "Live", etc).
        tags:
          type: string
          description:
            A comma separated list of tags associated with this infrastructure
            node.
        url:
          type: string
          description: The URL where more information about this element can be found.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description:
            The set of relationships from this infrastructure node to other
            elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
    StructurizrModel:
      type: object
      description: A software architecture model.
      properties:
        enterprise:
          type: object
          description: The enterprise associated with this model.
          properties:
            name:
              type: string
              description: The name of the enterprise.
        people:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrPerson"
        softwareSystems:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrSoftwareSystem"
        deploymentNodes:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrDeploymentNode"
    StructurizrPerson:
      type: object
      description: A person who uses a software system.
      properties:
        id:
          type: string
          description: The ID of this person in the model.
        name:
          type: string
          description: The name of this person.
        description:
          type: string
          description: A short description of this person.
        tags:
          type: string
          description: A comma separated list of tags associated with this person.
        url:
          type: string
          description: The URL where more information about this element can be found.
        location:
          type: string
          description: The location of this person.
          enum:
            - External
            - Internal
            - Unspecified
        group:
          type: string
          description: The name of the group in which this person should be included in.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
          description: The set of relationships from this person to other elements.
    StructurizrRelationship:
      type: object
      description: A relationship between two elements.
      properties:
        id:
          type: string
          description: The ID of this relationship in the model.
        description:
          type: string
          description: A short description of this relationship.
        tags:
          type: string
          description: A comma separated list of tags associated with this relationship.
        url:
          type: string
          description: The URL where more information about this relationship can be found.
        sourceId:
          type: string
          description: The ID of the source element.
        destinationId:
          type: string
          description: The ID of the destination element.
        technology:
          type: string
          description:
            The technology associated with this relationship (e.g. HTTPS, JDBC,
            etc).
        interactionStyle:
          type: string
          description: The interaction style (synchronous or asynchronous).
          enum:
            - Synchronous
            - Asynchronous
        linkedRelationshipId:
          type: string
          description:
            The ID of the container-container relationship upon which this
            container instance-container instance relationship is based.
    StructurizrRelationshipStyle:
      type: object
      description: A definition of a relationship style.
      properties:
        tag:
          type: string
          description: The tag to which this relationship style applies.
        thickness:
          type: number
          format: integer
          description: The thickness of the line, in pixels.
        color:
          type: string
          description: The colour of the line, as a HTML RGB hex string (e.g. '#ffffff').
        fontSize:
          type: number
          format: integer
          description:
            The standard font size used to render the relationship annotation,
            in pixels.
        width:
          type: number
          format: integer
          description: The width of the relationship annotation, in pixels.
        dashed:
          type: boolean
          description: A flag to indicate whether the line is rendered as dashed or not.
        routing:
          type: string
          description: The routing algorithm used when rendering lines.
          enum:
            - Direct
            - Curved
            - Orthogonal
        position:
          type: number
          format: integer
          description:
            The position of the annotation along the line; 0 (start) to 100
            (end).
        opacity:
          type: number
          format: integer
          description: The opacity used when rendering the line; 0-100.
    StructurizrRelationshipView:
      type: object
      description: An instance of a model relationship in a View.
      properties:
        id:
          type: string
          description: The ID of the relationship.
        description:
          type: string
          description: The description of this relationship (used in dynamic views only).
        response:
          type: boolean
          description:
            Signifies whether this relationship represents a return/response
            message (used in dynamic views only).
        order:
          type: string
          description:
            Gets the order of this relationship (used in dynamic views only;
            e.g. 1.0, 1.1, 2.0, etc).
        vertices:
          type: array
          description: The set of vertices used to render the relationship.
          items:
            $ref: "#/components/schemas/StructurizrVertex"
        routing:
          type: string
          description: The routing algorithm used when rendering this individual
            relationship.
          enum:
            - Direct
            - Curved
            - Orthogonal
        position:
          type: number
          format: integer
          description:
            The position of the annotation along the line; 0 (start) to 100
            (end).
    StructurizrSoftwareSystem:
      type: object
      description: A software system.
      properties:
        id:
          type: string
          description: The ID of this software system in the model.
        name:
          type: string
          description: The name of this software system.
        description:
          type: string
          description: A short description of this software system.
        location:
          type: string
          description: The location of this software system.
          enum:
            - External
            - Internal
            - Unspecified
        tags:
          type: string
          description: A comma separated list of tags associated with this software system.
        url:
          type: string
          description: The URL where more information about this element can be found.
        containers:
          type: array
          description: The set of containers within this software system.
          items:
            $ref: "#/components/schemas/StructurizrContainer"
        group:
          type: string
          description:
            The name of the group in which this software system should be
            included in.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description: The set of relationships from this software system to other elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
        documentation:
          $ref: "#/components/schemas/StructurizrDocumentation"
    StructurizrSoftwareSystemInstance:
      type: object
      description: An instance of a software system, running on a deployment node.
      properties:
        id:
          type: string
          description: The ID of this software system instance in the model.
        softwareSystemId:
          type: string
          description: The ID of the software system this is an instance of.
        instanceId:
          type: number
          description: The number/index of this instance.
        environment:
          type: string
          description:
            The deployment environment in which this software system instance
            resides (e.g. "Development", "Live", etc).
        tags:
          type: string
          description:
            A comma separated list of tags associated with this software system
            instance.
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
        relationships:
          type: array
          description:
            The set of relationships from this software system instance to
            other elements.
          items:
            $ref: "#/components/schemas/StructurizrRelationship"
        healthChecks:
          type: array
          description:
            The set of HTTP-based health checks for this software system
            instance.
          items:
            $ref: "#/components/schemas/StructurizrHttpHealthCheck"
    StructurizrSystemContextView:
      type: object
      description: A system context view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        softwareSystemId:
          type: string
          description: The ID of the software system this view is associated with.
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        enterpriseBoundaryVisible:
          type: boolean
          description:
            Specifies whether the enterprise boundary (to differentiate
            internal elements from external elements") should be visible on the
            resulting diagram.
        elements:
          type: array
          description: The set of elements in this view.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this view.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        animations:
          type: array
          description: The set of animation steps (optional).
          items:
            $ref: "#/components/schemas/StructurizrAnimationStep"
    StructurizrSystemLandscapeView:
      type: object
      description: A system landscape view.
      properties:
        title:
          type: string
          description: The title of this view (optional).
        description:
          type: string
          description: The description of this view.
        key:
          type: string
          description: A unique identifier for this view.
        paperSize:
          type: string
          description: The paper size that should be used to render this view.
          enum:
            - A6_Portrait
            - A6_Landscape
            - A5_Portrait
            - A5_Landscape
            - A4_Portrait
            - A4_Landscape
            - A3_Portrait
            - A3_Landscape
            - A2_Portrait
            - A2_Landscape
            - A1_Portrait
            - A1_Landscape
            - A0_Portrait
            - A0_Landscape
            - Letter_Portrait
            - Letter_Landscape
            - Legal_Portrait
            - Legal_Landscape
            - Slide_4_3
            - Slide_16_9
            - Slide_16_10
        dimensions:
          $ref: "#/components/schemas/StructurizrDimensions"
        automaticLayout:
          $ref: "#/components/schemas/StructurizrAutomaticLayout"
        enterpriseBoundaryVisible:
          type: boolean
          description:
            Specifies whether the enterprise boundary (to differentiate
            internal elements from external elements) should be visible on the
            resulting diagram.
        elements:
          type: array
          description: The set of elements in this views.
          items:
            $ref: "#/components/schemas/StructurizrElementView"
        relationships:
          type: array
          description: The set of relationships in this views.
          items:
            $ref: "#/components/schemas/StructurizrRelationshipView"
        animations:
          type: array
          description: The set of animation steps (optional).
          items:
            $ref: "#/components/schemas/StructurizrAnimationStep"
    StructurizrTerminology:
      type: object
      description:
        Provides a way for the terminology on diagrams, etc to be modified
        (e.g. language translations).
      properties:
        enterprise:
          type: string
          description: The terminology used when rendering the enterprise boundary.
        person:
          type: string
          description: The terminology used when rendering people.
        softwareSystem:
          type: string
          description: The terminology used when rendering software systems.
        container:
          type: string
          description: The terminology used when rendering containers.
        component:
          type: string
          description: The terminology used when rendering components.
        code:
          type: string
          description: The terminology used when rendering code elements.
        deploymentNode:
          type: string
          description: The terminology used when rendering deployment nodes.
        relationship:
          type: string
          description: The terminology used when rendering relationships.
    StructurizrUser:
      type: object
      description: Represents a user who should have access to a workspace.
      properties:
        username:
          type: string
          description: The username of the user (e.g. e-mail address).
        role:
          type: string
          description: The user's role.
          enum:
            - ReadWrite
            - ReadOnly
    StructurizrVertex:
      type: object
      description: The X, Y coordinate of a bend in a line.
      properties:
        x:
          type: number
          format: integer
          description: The horizontal position of the vertex when rendered.
        y:
          type: number
          format: integer
          description: The vertical position of the vertex when rendered.
    StructurizrViews:
      type: object
      description: The set of views onto a software architecture model.
      properties:
        systemLandscapeViews:
          type: array
          description: The set of system landscape views.
          items:
            $ref: "#/components/schemas/StructurizrSystemLandscapeView"
        systemContextViews:
          type: array
          description: The set of system context views.
          items:
            $ref: "#/components/schemas/StructurizrSystemContextView"
        containerViews:
          type: array
          description: The set of container views.
          items:
            $ref: "#/components/schemas/StructurizrContainerView"
        componentViews:
          type: array
          description: The set of component views.
          items:
            $ref: "#/components/schemas/StructurizrComponentView"
        dynamicViews:
          type: array
          description: The set of dynamic views.
          items:
            $ref: "#/components/schemas/StructurizrDynamicView"
        deploymentView:
          type: array
          description: The set of deployment views.
          items:
            $ref: "#/components/schemas/StructurizrDeploymentView"
        filteredViews:
          type: array
          description: The set of filtered views.
          items:
            $ref: "#/components/schemas/StructurizrFilteredView"
        configuration:
          $ref: "#/components/schemas/StructurizrConfiguration"
    StructurizrWorkspace:
      type: object
      description: Represents a Structurizr workspace, which is a wrapper for a
        software architecture model, views, and documentation.
      properties:
        id:
          type: number
          format: long
          description: The workspace ID.
        name:
          type: string
          description: The name of the workspace.
        description:
          type: string
          description: A short description of the workspace.
        version:
          type: string
          description: A version number for the workspace.
        thumbnail:
          type: string
          description:
            The thumbnail associated with the workspace; a Base64 encoded PNG
            file as a data URI (data:image/png;base64).
        lastModifiedDate:
          type: string
          description: The last modified date, in ISO 8601 format (e.g.
            "2018-09-08T12:40:03Z").
        lastModifiedUser:
          type: string
          description:
            A string identifying the user who last modified the workspace (e.g.
            an e-mail address or username).
        lastModifiedAgent:
          type: string
          description:
            A string identifying the agent that was last used to modify the
            workspace (e.g. "structurizr-java/1.2.0").
        model:
          $ref: "#/components/schemas/StructurizrModel"
        views:
          $ref: "#/components/schemas/StructurizrViews"
        documentation:
          $ref: "#/components/schemas/StructurizrDocumentation"
        configuration:
          $ref: "#/components/schemas/StructurizrWorkspaceConfiguration"
        properties:
          type: object
          description: A set of arbitrary name-value properties.
          additionalProperties: true
    StructurizrWorkspaceConfiguration:
      type: object
      description: The workspace configuration.
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/StructurizrUser"
    Theme:
      enum:
        - light
        - dark
      type: string
info:
  description: IcePanel API
  title: IcePanel API
  version: 1.0.0
openapi: 3.0.0
paths:
  /landscapes/{landscapeId}/action-logs/{actionLogId}:
    get:
      operationId: actionLogFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: actionLogId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  actionLog:
                    $ref: "#/components/schemas/ActionLog"
                required:
                  - actionLog
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - action-logs
      x-eov-operation-handler: actionLogs
  /landscapes/{landscapeId}/action-logs:
    get:
      operationId: actionLogsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/ActionLogFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  actionLogs:
                    items:
                      $ref: "#/components/schemas/ActionLog"
                    type: array
                required:
                  - actionLogs
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - action-logs
      x-eov-operation-handler: actionLogs
  /landscapes/{landscapeId}/action-logs/{actionLogId}/children:
    get:
      operationId: actionLogChildrenList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: actionLogId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/ActionLogFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  actionLogs:
                    items:
                      $ref: "#/components/schemas/ActionLog"
                    type: array
                required:
                  - actionLogs
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - action-logs
      x-eov-operation-handler: actionLogs
  /organizations/{organizationId}/api-keys/{apiKeyId}:
    delete:
      operationId: apiKeyDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: apiKeyId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - api-keys
      x-eov-operation-handler: apiKeys
    patch:
      operationId: apiKeyUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: apiKeyId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  apiKey:
                    $ref: "#/components/schemas/ApiKey"
                required:
                  - apiKey
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - api-keys
      x-eov-operation-handler: apiKeys
  /organizations/{organizationId}/api-keys:
    get:
      operationId: apiKeysList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  apiKeys:
                    items:
                      $ref: "#/components/schemas/ApiKey"
                    type: array
                required:
                  - apiKeys
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - api-keys
      x-eov-operation-handler: apiKeys
    post:
      operationId: apiKeyCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  apiKey:
                    $ref: "#/components/schemas/ApiKey"
                  secret:
                    type: string
                required:
                  - apiKey
                  - secret
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - api-keys
      x-eov-operation-handler: apiKeys
  /organizations/{organizationId}/azure-devops/authorizations:
    get:
      operationId: azureDevopsAuthorizationsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  azureDevopsAuthorizations:
                    items:
                      $ref: "#/components/schemas/AzureDevopsAuthorization"
                    type: array
                required:
                  - azureDevopsAuthorizations
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - azure-devops
      x-eov-operation-handler: azureDevops
    post:
      operationId: azureDevopsAuthorizationCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
              required:
                - code
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  azureDevopsAuthorization:
                    $ref: "#/components/schemas/AzureDevopsAuthorization"
                required:
                  - azureDevopsAuthorization
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - azure-devops
      x-eov-operation-handler: azureDevops
  /organizations/{organizationId}/azure-devops/authorizations/{azureDevopsAuthorizationId}/available-accounts:
    get:
      operationId: azureDevopsAuthorizationAvailableAccounts
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: azureDevopsAuthorizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  accounts:
                    items:
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                      required:
                        - id
                        - name
                      type: object
                    type: array
                required:
                  - accounts
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - azure-devops
      x-eov-operation-handler: azureDevops
  /organizations/{organizationId}/azure-devops/authorizations/{azureDevopsAuthorizationId}:
    delete:
      operationId: azureDevopsAuthorizationDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: azureDevopsAuthorizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - azure-devops
      x-eov-operation-handler: azureDevops
    patch:
      operationId: azureDevopsAuthorizationUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: azureDevopsAuthorizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AzureDevopsAuthorizationPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  azureDevopsAuthorization:
                    $ref: "#/components/schemas/AzureDevopsAuthorization"
                required:
                  - azureDevopsAuthorization
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - azure-devops
      x-eov-operation-handler: azureDevops
  /organizations/{organizationId}/bitbucket/authorizations:
    get:
      operationId: bitbucketAuthorizationsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  bitbucketAuthorizations:
                    items:
                      $ref: "#/components/schemas/BitbucketAuthorization"
                    type: array
                required:
                  - bitbucketAuthorizations
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket
      x-eov-operation-handler: bitbucket
    post:
      operationId: bitbucketAuthorizationCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
              required:
                - code
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  bitbucketAuthorization:
                    $ref: "#/components/schemas/BitbucketAuthorization"
                required:
                  - bitbucketAuthorization
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket
      x-eov-operation-handler: bitbucket
  /organizations/{organizationId}/bitbucket/authorizations/{bitbucketAuthorizationId}/available-workspaces:
    get:
      operationId: bitbucketAuthorizationAvailableWorkspaces
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketAuthorizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  workspaces:
                    items:
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                      required:
                        - id
                        - name
                      type: object
                    type: array
                required:
                  - workspaces
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket
      x-eov-operation-handler: bitbucket
  /organizations/{organizationId}/bitbucket/authorizations/{bitbucketAuthorizationId}:
    delete:
      operationId: bitbucketAuthorizationDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketAuthorizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket
      x-eov-operation-handler: bitbucket
    patch:
      operationId: bitbucketAuthorizationUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketAuthorizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BitbucketAuthorizationPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  bitbucketAuthorization:
                    $ref: "#/components/schemas/BitbucketAuthorization"
                required:
                  - bitbucketAuthorization
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket
      x-eov-operation-handler: bitbucket
  /organizations/{organizationId}/bitbucket-server/tokens:
    get:
      operationId: bitbucketServerTokensList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  bitbucketServerTokens:
                    items:
                      $ref: "#/components/schemas/BitbucketServerToken"
                    type: array
                required:
                  - bitbucketServerTokens
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket-server
      x-eov-operation-handler: bitbucketServer
    post:
      operationId: bitbucketServerTokenCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BitbucketServerTokenRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  bitbucketServerToken:
                    $ref: "#/components/schemas/BitbucketServerToken"
                required:
                  - bitbucketServerToken
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket-server
      x-eov-operation-handler: bitbucketServer
  /organizations/{organizationId}/bitbucket-server/tokens/{bitbucketServerTokenId}:
    delete:
      operationId: bitbucketServerTokenDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerTokenId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket-server
      x-eov-operation-handler: bitbucketServer
    patch:
      operationId: bitbucketServerTokenUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerTokenId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BitbucketServerTokenPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  bitbucketServerToken:
                    $ref: "#/components/schemas/BitbucketServerToken"
                required:
                  - bitbucketServerToken
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - bitbucket-server
      x-eov-operation-handler: bitbucketServer
  /catalog/news-articles:
    get:
      operationId: catalogNewsArticlesList
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/CatalogNewsArticleFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  catalogNewsArticles:
                    items:
                      $ref: "#/components/schemas/CatalogNewsArticle"
                    type: array
                required:
                  - catalogNewsArticles
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - catalog-news-articles
      x-eov-operation-handler: catalogNewsArticles
  /catalog/news-articles/slugs/{catalogNewsArticleSlug}:
    get:
      operationId: catalogNewsArticleSlugFind
      parameters:
        - in: path
          name: catalogNewsArticleSlug
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  catalogNewsArticle:
                    $ref: "#/components/schemas/CatalogNewsArticle"
                required:
                  - catalogNewsArticle
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - catalog-news-articles
      x-eov-operation-handler: catalogNewsArticles
  /catalog/news-articles/{catalogNewsArticleId}:
    get:
      operationId: catalogNewsArticleFind
      parameters:
        - in: path
          name: catalogNewsArticleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  catalogNewsArticle:
                    $ref: "#/components/schemas/CatalogNewsArticle"
                required:
                  - catalogNewsArticle
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - catalog-news-articles
      x-eov-operation-handler: catalogNewsArticles
  /catalog/technologies:
    get:
      operationId: catalogTechnologiesList
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/CatalogTechnologyFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  catalogTechnologies:
                    items:
                      $ref: "#/components/schemas/CatalogTechnology"
                    type: array
                required:
                  - catalogTechnologies
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - catalog-technologies
      x-eov-operation-handler: catalogTechnologies
  /catalog/technologies/slugs/{catalogTechnologySlug}:
    get:
      operationId: catalogTechnologySlugFind
      parameters:
        - in: path
          name: catalogTechnologySlug
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  catalogTechnology:
                    $ref: "#/components/schemas/CatalogTechnology"
                required:
                  - catalogTechnology
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - catalog-technologies
      x-eov-operation-handler: catalogTechnologies
  /catalog/technologies/{catalogTechnologyId}:
    get:
      operationId: catalogTechnologyFind
      parameters:
        - in: path
          name: catalogTechnologyId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  catalogTechnology:
                    $ref: "#/components/schemas/CatalogTechnology"
                required:
                  - catalogTechnology
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - catalog-technologies
      x-eov-operation-handler: catalogTechnologies
  /organizations/{organizationId}/code-repos:
    get:
      operationId: codeReposList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/CodeRepoFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  codeRepos:
                    items:
                      $ref: "#/components/schemas/CodeRepo"
                    type: array
                required:
                  - codeRepos
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
    head:
      operationId: codeReposExist
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/CodeRepoFilter"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
    post:
      operationId: codeRepoCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeRepoRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  codeRepo:
                    $ref: "#/components/schemas/CodeRepo"
                required:
                  - codeRepo
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
  /organizations/{organizationId}/code-repos/{codeRepoId}:
    delete:
      operationId: codeRepoDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
    get:
      operationId: codeRepoFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  codeRepo:
                    $ref: "#/components/schemas/CodeRepo"
                required:
                  - codeRepo
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
    patch:
      operationId: codeRepoUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeRepoPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  codeRepo:
                    $ref: "#/components/schemas/CodeRepo"
                required:
                  - codeRepo
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
  /organizations/{organizationId}/code-repos/{codeRepoId}/refs/{refId}/tree:
    get:
      operationId: codeRepoRefTreeFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
        - in: path
          name: refId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  codeRepoTree:
                    items:
                      $ref: "#/components/schemas/CodeRepoTreeItem"
                    type: array
                required:
                  - codeRepoTree
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
  /organizations/{organizationId}/code-repos/{codeRepoId}/trees/sync:
    get:
      operationId: codeRepoTreesSync
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  codeRepo:
                    $ref: "#/components/schemas/CodeRepo"
                required:
                  - codeRepo
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
  /organizations/{organizationId}/code-repos/{codeRepoId}/trees/{sha}:
    head:
      operationId: codeRepoTreeShaExists
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
        - in: path
          name: sha
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
    patch:
      operationId: codeRepoTreeShaUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: codeRepoId
          required: true
          schema:
            type: string
        - in: path
          name: sha
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                codeRepoTree:
                  items:
                    $ref: "#/components/schemas/CodeRepoTreeItem"
                  type: array
              required:
                - codeRepoTree
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - code-repos
      x-eov-operation-handler: codeRepos
  /landscapes/{landscapeId}/versions/{versionId}/comments/{commentId}/replies:
    get:
      operationId: commentRepliesList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commentReplies:
                    items:
                      $ref: "#/components/schemas/CommentReply"
                    type: array
                required:
                  - commentReplies
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comment-replies
      x-eov-operation-handler: commentReplies
    post:
      operationId: commentReplyCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentReplyRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commentReply:
                    $ref: "#/components/schemas/CommentReply"
                required:
                  - commentReply
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comment-replies
      x-eov-operation-handler: commentReplies
  /landscapes/{landscapeId}/versions/{versionId}/comments/{commentId}/replies/{commentReplyId}:
    delete:
      operationId: commentReplyDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
        - in: path
          name: commentReplyId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: ConflictError
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comment-replies
      x-eov-operation-handler: commentReplies
    get:
      operationId: commentReplyFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
        - in: path
          name: commentReplyId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commentReply:
                    $ref: "#/components/schemas/CommentReply"
                required:
                  - commentReply
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comment-replies
      x-eov-operation-handler: commentReplies
    patch:
      operationId: commentReplyUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
        - in: path
          name: commentReplyId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentReplyPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commentReply:
                    $ref: "#/components/schemas/CommentReply"
                required:
                  - commentReply
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: ConflictError
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comment-replies
      x-eov-operation-handler: commentReplies
  /landscapes/{landscapeId}/versions/{versionId}/comments:
    get:
      operationId: commentsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: status
          schema:
            items:
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comments:
                    items:
                      $ref: "#/components/schemas/Comment"
                    type: array
                required:
                  - comments
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comments
      x-eov-operation-handler: comments
    post:
      operationId: commentCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comment:
                    $ref: "#/components/schemas/Comment"
                required:
                  - comment
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comments
      x-eov-operation-handler: comments
  /landscapes/{landscapeId}/versions/{versionId}/comments/{commentId}:
    delete:
      operationId: commentDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: ConflictError
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comments
      x-eov-operation-handler: comments
    get:
      operationId: commentFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comment:
                    $ref: "#/components/schemas/Comment"
                required:
                  - comment
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comments
      x-eov-operation-handler: comments
    patch:
      operationId: commentUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comment:
                    $ref: "#/components/schemas/Comment"
                required:
                  - comment
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comments
      x-eov-operation-handler: comments
    put:
      operationId: commentUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CommentRequired"
                - $ref: "#/components/schemas/CommentPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comment:
                    $ref: "#/components/schemas/Comment"
                required:
                  - comment
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - comments
      x-eov-operation-handler: comments
  /contact:
    post:
      operationId: contactCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - contact
      x-eov-operation-handler: contact
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/{diagramId}/content:
    get:
      operationId: diagramContentFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagramContent
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-contents
      x-eov-operation-handler: diagramContents
    patch:
      operationId: diagramContentUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiagramContentPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagramContent
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-contents
      x-eov-operation-handler: diagramContents
    put:
      operationId: diagramContentReplace
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiagramContentRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagramContent
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-contents
      x-eov-operation-handler: diagramContents
  /landscapes/{landscapeId}/versions/{versionId}/diagram-groups/{diagramGroupId}:
    delete:
      operationId: diagramGroupDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
    get:
      operationId: diagramGroupFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramGroup:
                    $ref: "#/components/schemas/DiagramGroup"
                required:
                  - diagramGroup
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
    head:
      operationId: diagramGroupExists
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
    patch:
      operationId: diagramGroupUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiagramGroupPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramGroup:
                    $ref: "#/components/schemas/DiagramGroup"
                required:
                  - diagramGroup
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
    put:
      operationId: diagramGroupUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DiagramGroupRequired"
                - $ref: "#/components/schemas/DiagramGroupPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramGroup:
                    $ref: "#/components/schemas/DiagramGroup"
                required:
                  - diagramGroup
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
  /landscapes/{landscapeId}/versions/{versionId}/diagram-groups:
    get:
      operationId: diagramGroupsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/DiagramGroupFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramGroups:
                    items:
                      $ref: "#/components/schemas/DiagramGroup"
                    type: array
                required:
                  - diagramGroups
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
    post:
      operationId: diagramGroupCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiagramGroupRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagramGroup:
                    $ref: "#/components/schemas/DiagramGroup"
                required:
                  - diagramGroup
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagram-groups
      x-eov-operation-handler: diagramGroups
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/{diagramId}:
    delete:
      operationId: diagramDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
    get:
      operationId: diagramFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagram:
                    $ref: "#/components/schemas/Diagram"
                required:
                  - diagram
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
    head:
      operationId: diagramExists
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
    patch:
      operationId: diagramUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DiagramPartial"
                - $ref: "#/components/schemas/DiagramContentPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagram:
                    $ref: "#/components/schemas/Diagram"
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagram
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
    put:
      operationId: diagramUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DiagramRequired"
                - $ref: "#/components/schemas/DiagramContentRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagram:
                    $ref: "#/components/schemas/Diagram"
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagram
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/diagrams:
    get:
      operationId: diagramsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/DiagramFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagrams:
                    items:
                      $ref: "#/components/schemas/Diagram"
                    type: array
                required:
                  - diagrams
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
    post:
      operationId: diagramCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DiagramRequired"
                - $ref: "#/components/schemas/DiagramContentRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagram:
                    $ref: "#/components/schemas/Diagram"
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagram
                  - diagramContent
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/{diagramId}/view:
    post:
      operationId: diagramView
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/{diagramId}/action:
    post:
      operationId: diagramAction
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: action
          required: false
          schema:
            $ref: "#/components/schemas/DiagramAction"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/{diagramId}/export/png:
    post:
      operationId: diagramExportPng
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiagramExportPngOptions"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  url:
                    format: uri
                    type: string
                required:
                  - url
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/thumbnails:
    get:
      operationId: diagramThumbnailsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/DiagramFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnails:
                    additionalProperties:
                      $ref: "#/components/schemas/DiagramThumbnail"
                    type: object
                required:
                  - thumbnails
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/diagrams/{diagramId}/thumbnail:
    get:
      operationId: diagramThumbnailGet
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnail:
                    $ref: "#/components/schemas/DiagramThumbnail"
                required:
                  - thumbnail
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - diagrams
      x-eov-operation-handler: diagrams
  /landscapes/{landscapeId}/versions/{versionId}/domains/{domainId}:
    delete:
      operationId: domainDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
    get:
      operationId: domainFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domain:
                    $ref: "#/components/schemas/Domain"
                required:
                  - domain
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
    head:
      operationId: domainExists
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
    patch:
      operationId: domainUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domain:
                    $ref: "#/components/schemas/Domain"
                required:
                  - domain
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
    put:
      operationId: domainUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DomainRequired"
                - $ref: "#/components/schemas/DomainPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domain:
                    $ref: "#/components/schemas/Domain"
                required:
                  - domain
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
  /landscapes/{landscapeId}/versions/{versionId}/domains:
    get:
      operationId: domainsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/DomainFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domains:
                    items:
                      $ref: "#/components/schemas/Domain"
                    type: array
                required:
                  - domains
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
    post:
      operationId: domainCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DomainRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domain:
                    $ref: "#/components/schemas/Domain"
                required:
                  - domain
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
  /landscapes/{landscapeId}/versions/{versionId}/domains/{domainId}/subscription:
    delete:
      operationId: domainSubscriptionDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domain:
                    $ref: "#/components/schemas/Domain"
                required:
                  - domain
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
    post:
      operationId: domainSubscriptionCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: domainId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  domain:
                    $ref: "#/components/schemas/Domain"
                required:
                  - domain
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - domains
      x-eov-operation-handler: domains
  /landscapes/{landscapeId}/versions/{versionId}/flows/{flowId}:
    delete:
      operationId: flowDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
    get:
      operationId: flowFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  flow:
                    $ref: "#/components/schemas/Flow"
                required:
                  - flow
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
    head:
      operationId: flowExists
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
    patch:
      operationId: flowUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  flow:
                    $ref: "#/components/schemas/Flow"
                required:
                  - flow
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
    put:
      operationId: flowUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  flow:
                    $ref: "#/components/schemas/Flow"
                required:
                  - flow
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /landscapes/{landscapeId}/versions/{versionId}/flows:
    get:
      operationId: flowsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/FlowFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  flows:
                    items:
                      $ref: "#/components/schemas/Flow"
                    type: array
                required:
                  - flows
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
    post:
      operationId: flowCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  flow:
                    $ref: "#/components/schemas/Flow"
                required:
                  - flow
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /landscapes/{landscapeId}/versions/{versionId}/flows/{flowId}/view:
    post:
      operationId: flowView
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /landscapes/{landscapeId}/versions/{versionId}/flows/thumbnails:
    get:
      operationId: flowThumbnailsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnails:
                    additionalProperties:
                      $ref: "#/components/schemas/FlowThumbnail"
                    type: object
                required:
                  - thumbnails
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /landscapes/{landscapeId}/versions/{versionId}/flows/{flowId}/thumbnail:
    get:
      operationId: flowThumbnailGet
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnail:
                    $ref: "#/components/schemas/FlowThumbnail"
                required:
                  - thumbnail
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /landscapes/{landscapeId}/versions/{versionId}/flows/{flowId}/export/text:
    get:
      operationId: flowExportText
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/plain: {}
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /landscapes/{landscapeId}/versions/{versionId}/flows/{flowId}/export/code:
    get:
      operationId: flowExportCode
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/plain: {}
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - flows
      x-eov-operation-handler: flows
  /organizations/{organizationId}/github/installs:
    get:
      operationId: githubInstallsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  githubInstalls:
                    items:
                      $ref: "#/components/schemas/GithubInstall"
                    type: array
                required:
                  - githubInstalls
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - github
      x-eov-operation-handler: github
    post:
      operationId: githubInstallCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
                githubInstallId:
                  type: number
              required:
                - code
                - githubInstallId
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  githubInstall:
                    $ref: "#/components/schemas/GithubInstall"
                required:
                  - githubInstall
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - github
      x-eov-operation-handler: github
  /organizations/{organizationId}/github/installs/{githubInstallId}:
    delete:
      operationId: githubInstallDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: githubInstallId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - github
      x-eov-operation-handler: github
  /organizations/{organizationId}/gitlab/authorizations:
    get:
      operationId: gitlabAuthorizationsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  gitlabAuthorizations:
                    items:
                      $ref: "#/components/schemas/GitlabAuthorization"
                    type: array
                required:
                  - gitlabAuthorizations
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - gitlab
      x-eov-operation-handler: gitlab
    post:
      operationId: gitlabAuthorizationCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
              required:
                - code
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  gitlabAuthorization:
                    $ref: "#/components/schemas/GitlabAuthorization"
                required:
                  - gitlabAuthorization
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - gitlab
      x-eov-operation-handler: gitlab
  /organizations/{organizationId}/gitlab/authorizations/{gitlabAuthorizationId}/available-groups:
    get:
      operationId: gitlabAuthorizationAvailableGroups
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: gitlabAuthorizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  groups:
                    items:
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                      required:
                        - id
                        - name
                      type: object
                    type: array
                required:
                  - groups
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - gitlab
      x-eov-operation-handler: gitlab
  /organizations/{organizationId}/gitlab/authorizations/{gitlabAuthorizationId}:
    delete:
      operationId: gitlabAuthorizationDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: gitlabAuthorizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - gitlab
      x-eov-operation-handler: gitlab
    patch:
      operationId: gitlabAuthorizationUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: gitlabAuthorizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitlabAuthorizationPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  gitlabAuthorization:
                    $ref: "#/components/schemas/GitlabAuthorization"
                required:
                  - gitlabAuthorization
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - gitlab
      x-eov-operation-handler: gitlab
  /health:
    get:
      operationId: healthCheck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
          description: Service Unavailable
      tags:
        - health
      x-eov-operation-handler: health
  /organizations/{organizationId}/landscapes/{landscapeId}:
    delete:
      operationId: landscapeDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
    get:
      operationId: landscapeFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscape:
                    $ref: "#/components/schemas/Landscape"
                required:
                  - landscape
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
    patch:
      operationId: landscapeUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LandscapePartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscape:
                    $ref: "#/components/schemas/Landscape"
                required:
                  - landscape
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
  /organizations/{organizationId}/landscapes:
    get:
      operationId: landscapesList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscapes:
                    items:
                      $ref: "#/components/schemas/Landscape"
                    type: array
                required:
                  - landscapes
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
    post:
      operationId: landscapeCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LandscapeRequired"
                - properties:
                    backstageEntities:
                      $ref: "#/components/schemas/BackstageEntityMap"
                    structurizrWorkspace:
                      $ref: "#/components/schemas/StructurizrWorkspace"
                    templateId:
                      type: string
                  type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscape:
                    $ref: "#/components/schemas/Landscape"
                  version:
                    $ref: "#/components/schemas/Version"
                required:
                  - landscape
                  - version
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
  /organizations/{organizationId}/landscapes/{landscapeId}/duplicate:
    post:
      operationId: landscapeDuplicate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: query
          name: targetOrganizationId
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LandscapeRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscape:
                    $ref: "#/components/schemas/Landscape"
                required:
                  - landscape
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
  /organizations/{organizationId}/landscapes/{landscapeId}/copy:
    post:
      operationId: landscapeCopy
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: query
          name: targetLandscapeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
  /organizations/{organizationId}/landscapes/{landscapeId}/versions/{versionId}/export/pdf:
    post:
      operationId: landscapeExportPdf
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  format: email
                  type: string
                filename:
                  type: string
                name:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  url:
                    format: uri
                    type: string
                required:
                  - url
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
  /organizations/{organizationId}/landscapes/{landscapeId}/thumbnails/primary:
    get:
      operationId: landscapeThumbnailsPrimaryGet
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnail:
                    $ref: "#/components/schemas/DiagramThumbnail"
                required:
                  - thumbnail
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscapes
      x-eov-operation-handler: landscapes
  /landscape-templates:
    get:
      operationId: landscapeTemplatesList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscapeTemplates:
                    items:
                      $ref: "#/components/schemas/LandscapeTemplate"
                    type: array
                required:
                  - landscapeTemplates
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscape-templates
      x-eov-operation-handler: landscapeTemplates
  /landscape-templates/{landscapeTemplateId}/thumbnails/primary:
    get:
      operationId: landscapeTemplateThumbnailsPrimaryGet
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeTemplateId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnail:
                    $ref: "#/components/schemas/DiagramThumbnail"
                required:
                  - thumbnail
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - landscape-templates
      x-eov-operation-handler: landscapeTemplates
  /landscapes/{landscapeId}/versions/{versionId}/model/connections/{modelConnectionId}:
    delete:
      operationId: modelConnectionDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelConnectionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
    get:
      operationId: modelConnectionFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelConnectionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelConnection:
                    $ref: "#/components/schemas/ModelConnection"
                required:
                  - modelConnection
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
    patch:
      operationId: modelConnectionUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelConnectionId
          required: true
          schema:
            type: string
        - in: query
          name: updateDiagrams
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelConnectionPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelConnection:
                    $ref: "#/components/schemas/ModelConnection"
                required:
                  - modelConnection
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
    put:
      operationId: modelConnectionUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelConnectionId
          required: true
          schema:
            type: string
        - in: query
          name: originConnector
          required: false
          schema:
            enum:
              - top-left
              - top-center
              - top-right
              - right-top
              - right-middle
              - right-bottom
              - bottom-right
              - bottom-center
              - bottom-left
              - left-bottom
              - left-middle
              - left-top
            type: string
        - in: query
          name: targetConnector
          required: false
          schema:
            enum:
              - top-left
              - top-center
              - top-right
              - right-top
              - right-middle
              - right-bottom
              - bottom-right
              - bottom-center
              - bottom-left
              - left-bottom
              - left-middle
              - left-top
            type: string
        - in: query
          name: updateDiagrams
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ModelConnectionRequired"
                - $ref: "#/components/schemas/ModelConnectionPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelConnection:
                    $ref: "#/components/schemas/ModelConnection"
                required:
                  - modelConnection
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
  /landscapes/{landscapeId}/versions/{versionId}/model/connections:
    get:
      operationId: modelConnectionsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/ModelConnectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelConnections:
                    items:
                      $ref: "#/components/schemas/ModelConnection"
                    type: array
                required:
                  - modelConnections
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
    post:
      operationId: modelConnectionCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelConnectionRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelConnection:
                    $ref: "#/components/schemas/ModelConnection"
                required:
                  - modelConnection
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
  /landscapes/{landscapeId}/versions/{versionId}/model/connections/export/csv:
    get:
      operationId: modelConnectionsExportCsv
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/csv: {}
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-connections
      x-eov-operation-handler: modelConnections
  /landscapes/{landscapeId}/versions/{versionId}/model/objects/{modelObjectId}:
    delete:
      operationId: modelObjectDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelObjectId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
    get:
      operationId: modelObjectFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelObjectId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelObject:
                    $ref: "#/components/schemas/ModelObject"
                required:
                  - modelObject
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
    patch:
      operationId: modelObjectUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelObjectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelObjectPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelObject:
                    $ref: "#/components/schemas/ModelObject"
                required:
                  - modelObject
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
    put:
      operationId: modelObjectUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelObjectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ModelObjectRequired"
                - $ref: "#/components/schemas/ModelObjectPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelObject:
                    $ref: "#/components/schemas/ModelObject"
                required:
                  - modelObject
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
  /landscapes/{landscapeId}/versions/{versionId}/model/objects:
    get:
      operationId: modelObjectsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/ModelObjectFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelObjects:
                    items:
                      $ref: "#/components/schemas/ModelObject"
                    type: array
                required:
                  - modelObjects
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
    post:
      operationId: modelObjectCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelObjectRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelObject:
                    $ref: "#/components/schemas/ModelObject"
                required:
                  - modelObject
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
  /landscapes/{landscapeId}/versions/{versionId}/model/objects/{modelObjectId}/diagrams/entry:
    get:
      operationId: modelObjectDiagramsEntry
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelObjectId
          required: true
          schema:
            type: string
        - in: query
          name: createEntry
          required: false
          schema:
            type: boolean
        - in: query
          name: updateViewedAt
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  diagram:
                    $ref: "#/components/schemas/Diagram"
                  diagramContent:
                    $ref: "#/components/schemas/DiagramContent"
                required:
                  - diagram
                  - diagramContent
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
  /landscapes/{landscapeId}/versions/{versionId}/model/objects/{modelObjectId}/links/sync:
    post:
      operationId: modelObjectLinksSync
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: modelObjectId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  modelObject:
                    $ref: "#/components/schemas/ModelObject"
                required:
                  - modelObject
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
  /landscapes/{landscapeId}/versions/{versionId}/model/objects/export/csv:
    get:
      operationId: modelObjectsExportCsv
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/csv: {}
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - model-objects
      x-eov-operation-handler: modelObjects
  /news/subscribe:
    post:
      operationId: newsSubscribe
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  format: email
                  type: string
                name:
                  type: string
              required:
                - email
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - news
      x-eov-operation-handler: news
  /organizations/{organizationId}/billing/link:
    post:
      operationId: organizationBillingLinkCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                returnUrl:
                  format: uri
                  type: string
              required:
                - returnUrl
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationBillingLinks"
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-billing
      x-eov-operation-handler: organizationBilling
  /organizations/{organizationId}/billing/subscription:
    delete:
      operationId: organizationBillingSubscriptionCancel
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-billing
      x-eov-operation-handler: organizationBilling
    patch:
      operationId: organizationBillingSubscriptionUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationBillingSubscriptionUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-billing
      x-eov-operation-handler: organizationBilling
    post:
      operationId: organizationBillingSubscriptionCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                subscription:
                  $ref: "#/components/schemas/OrganizationBillingSubscriptionCreate"
              required:
                - subscription
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-billing
      x-eov-operation-handler: organizationBilling
  /organizations/{organizationId}/billing/subscription/link:
    post:
      operationId: organizationBillingSubscriptionLinkCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cancelUrl:
                  format: uri
                  type: string
                subscription:
                  $ref: "#/components/schemas/OrganizationBillingSubscriptionCreate"
                successUrl:
                  format: uri
                  type: string
              required:
                - cancelUrl
                - subscription
                - successUrl
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  url:
                    format: uri
                    type: string
                required:
                  - url
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-billing
      x-eov-operation-handler: organizationBilling
  /organizations/{organizationId}:
    delete:
      operationId: organizationDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organizations
      x-eov-operation-handler: organizations
    get:
      operationId: organizationFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organization:
                    $ref: "#/components/schemas/Organization"
                required:
                  - organization
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organizations
      x-eov-operation-handler: organizations
    patch:
      operationId: organizationUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organization:
                    $ref: "#/components/schemas/Organization"
                required:
                  - organization
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organizations
      x-eov-operation-handler: organizations
  /organizations:
    get:
      operationId: organizationsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: query
          name: admin
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organizations:
                    items:
                      $ref: "#/components/schemas/Organization"
                    type: array
                required:
                  - organizations
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organizations
      x-eov-operation-handler: organizations
    post:
      operationId: organizationCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organization:
                    $ref: "#/components/schemas/Organization"
                required:
                  - organization
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organizations
      x-eov-operation-handler: organizations
  /organizations/{organizationId}/users/invites:
    get:
      operationId: organizationUserInvitesList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organizationUserInvites:
                    items:
                      $ref: "#/components/schemas/OrganizationUserInvite"
                    type: array
                required:
                  - organizationUserInvites
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-user-invites
      x-eov-operation-handler: organizationUserInvites
    post:
      operationId: organizationUserInviteCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUserInviteRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organizationUserInvite:
                    $ref: "#/components/schemas/OrganizationUserInvite"
                required:
                  - organizationUserInvite
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-user-invites
      x-eov-operation-handler: organizationUserInvites
  /organizations/{organizationId}/users/invites/{organizationUserInviteId}:
    post:
      operationId: organizationUserInviteRevoke
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: organizationUserInviteId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organizationUserInvite:
                    $ref: "#/components/schemas/OrganizationUserInvite"
                required:
                  - organizationUserInvite
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-user-invites
      x-eov-operation-handler: organizationUserInvites
  /organizations/{organizationId}/users/{userId}:
    delete:
      operationId: organizationUserDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-users
      x-eov-operation-handler: organizationUsers
    patch:
      operationId: organizationUserUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUser"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organizationUser:
                    $ref: "#/components/schemas/OrganizationUser"
                required:
                  - organizationUser
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-users
      x-eov-operation-handler: organizationUsers
  /organizations/{organizationId}/users:
    get:
      operationId: organizationUsersList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  organizationUsers:
                    additionalProperties:
                      allOf:
                        - $ref: "#/components/schemas/OrganizationUser"
                        - $ref: "#/components/schemas/OrganizationUserInfo"
                    type: object
                required:
                  - organizationUsers
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - organization-users
      x-eov-operation-handler: organizationUsers
  /landscapes/{landscapeId}/versions/{versionId}/share-link:
    delete:
      operationId: shareLinkDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link
      x-eov-operation-handler: shareLink
    get:
      operationId: shareLinkFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  shareLink:
                    $ref: "#/components/schemas/ShareLink"
                  stats:
                    $ref: "#/components/schemas/ShareLinkStats"
                  url:
                    type: string
                required:
                  - shareLink
                  - stats
                  - url
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link
      x-eov-operation-handler: shareLink
    patch:
      operationId: shareLinkUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareLinkPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  shareLink:
                    $ref: "#/components/schemas/ShareLink"
                required:
                  - shareLink
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link
      x-eov-operation-handler: shareLink
    post:
      operationId: shareLinkCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareLinkRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  shareLink:
                    $ref: "#/components/schemas/ShareLink"
                  url:
                    type: string
                required:
                  - shareLink
                  - url
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: ConflictError
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link
      x-eov-operation-handler: shareLink
  /landscapes/{landscapeId}/versions/{versionId}/share-link/options:
    post:
      operationId: shareLinkOptionsUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareLinkOptionsRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  shareLinkOptions:
                    $ref: "#/components/schemas/ShareLinkOptions"
                required:
                  - shareLinkOptions
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link-options
      x-eov-operation-handler: shareLinkOptions
  /share-links/{shortId}:
    get:
      operationId: shareLinkPublicFind
      parameters:
        - in: path
          name: shortId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  shareLink:
                    $ref: "#/components/schemas/ShareLink"
                  shareLinkOrganizationAuth:
                    type: boolean
                required:
                  - shareLink
                  - shareLinkOrganizationAuth
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link-public
      x-eov-operation-handler: shareLinkPublic
  /share-links/{shortId}/options/{optionsShortId}:
    get:
      operationId: shareLinkPublicOptionsFind
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
        - in: path
          name: shortId
          required: true
          schema:
            type: string
        - in: path
          name: optionsShortId
          required: true
          schema:
            type: string
        - in: query
          name: inFrame
          required: false
          schema:
            type: boolean
        - in: query
          name: frameLocation
          required: false
          schema:
            $ref: "#/components/schemas/ShareLinkFrameLocation"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  shareLinkOptions:
                    $ref: "#/components/schemas/ShareLinkOptions"
                required:
                  - shareLinkOptions
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link-public
      x-eov-operation-handler: shareLinkPublic
  /share-links/{shortId}/landscape:
    get:
      operationId: shareLinkPublicLandscapeFind
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
        - in: path
          name: shortId
          required: true
          schema:
            type: string
        - in: query
          name: inFrame
          required: false
          schema:
            type: boolean
        - in: query
          name: frameLocation
          required: false
          schema:
            $ref: "#/components/schemas/ShareLinkFrameLocation"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comments:
                    items:
                      $ref: "#/components/schemas/Comment"
                    type: array
                  diagramContents:
                    items:
                      $ref: "#/components/schemas/DiagramContent"
                    type: array
                  diagramGroups:
                    items:
                      $ref: "#/components/schemas/DiagramGroup"
                    type: array
                  diagramThumbnails:
                    additionalProperties:
                      $ref: "#/components/schemas/DiagramThumbnail"
                    type: object
                  diagrams:
                    items:
                      $ref: "#/components/schemas/Diagram"
                    type: array
                  domains:
                    items:
                      $ref: "#/components/schemas/Domain"
                    type: array
                  flowThumbnails:
                    additionalProperties:
                      $ref: "#/components/schemas/FlowThumbnail"
                    type: object
                  flows:
                    items:
                      $ref: "#/components/schemas/Flow"
                    type: array
                  landscape:
                    $ref: "#/components/schemas/Landscape"
                  modelConnections:
                    items:
                      $ref: "#/components/schemas/ModelConnection"
                    type: array
                  modelObjects:
                    items:
                      $ref: "#/components/schemas/ModelObject"
                    type: array
                  organizationBrand:
                    $ref: "#/components/schemas/OrganizationBrand"
                  tagGroups:
                    items:
                      $ref: "#/components/schemas/TagGroup"
                    type: array
                  tags:
                    items:
                      $ref: "#/components/schemas/Tag"
                    type: array
                  tours:
                    items:
                      $ref: "#/components/schemas/Tour"
                    type: array
                  version:
                    $ref: "#/components/schemas/Version"
                required:
                  - comments
                  - diagramContents
                  - diagramGroups
                  - diagrams
                  - diagramThumbnails
                  - domains
                  - flows
                  - flowThumbnails
                  - landscape
                  - modelConnections
                  - modelObjects
                  - tagGroups
                  - tags
                  - tours
                  - version
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link-public
      x-eov-operation-handler: shareLinkPublic
  /share-links/{shortId}/landscape/diagrams/{diagramId}/view:
    post:
      operationId: shareLinkPublicDiagramView
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
        - in: path
          name: shortId
          required: true
          schema:
            type: string
        - in: path
          name: diagramId
          required: true
          schema:
            type: string
        - in: query
          name: inFrame
          required: false
          schema:
            type: boolean
        - in: query
          name: frameLocation
          required: false
          schema:
            $ref: "#/components/schemas/ShareLinkFrameLocation"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link-public
      x-eov-operation-handler: shareLinkPublic
  /share-links/{shortId}/landscape/flows/{flowId}/view:
    post:
      operationId: shareLinkPublicFlowView
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
        - in: path
          name: shortId
          required: true
          schema:
            type: string
        - in: path
          name: flowId
          required: true
          schema:
            type: string
        - in: query
          name: inFrame
          required: false
          schema:
            type: boolean
        - in: query
          name: frameLocation
          required: false
          schema:
            $ref: "#/components/schemas/ShareLinkFrameLocation"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - share-link-public
      x-eov-operation-handler: shareLinkPublic
  /landscapes/{landscapeId}/versions/{versionId}/tag-groups/{tagGroupId}:
    delete:
      operationId: tagGroupDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tag-groups
      x-eov-operation-handler: tagGroups
    get:
      operationId: tagGroupFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagGroupId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tagGroup:
                    $ref: "#/components/schemas/TagGroup"
                required:
                  - tagGroup
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tag-groups
      x-eov-operation-handler: tagGroups
    patch:
      operationId: tagGroupUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagGroupPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tagGroup:
                    $ref: "#/components/schemas/TagGroup"
                required:
                  - tagGroup
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tag-groups
      x-eov-operation-handler: tagGroups
    put:
      operationId: tagGroupUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TagGroupRequired"
                - $ref: "#/components/schemas/TagGroupPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tagGroup:
                    $ref: "#/components/schemas/TagGroup"
                required:
                  - tagGroup
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tag-groups
      x-eov-operation-handler: tagGroups
  /landscapes/{landscapeId}/versions/{versionId}/tag-groups:
    get:
      operationId: tagGroupsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/TagGroupFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tagGroups:
                    items:
                      $ref: "#/components/schemas/TagGroup"
                    type: array
                required:
                  - tagGroups
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tag-groups
      x-eov-operation-handler: tagGroups
    post:
      operationId: tagGroupCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagGroupRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tagGroup:
                    $ref: "#/components/schemas/TagGroup"
                required:
                  - tagGroup
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tag-groups
      x-eov-operation-handler: tagGroups
  /landscapes/{landscapeId}/versions/{versionId}/tags/{tagId}:
    delete:
      operationId: tagDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tags
      x-eov-operation-handler: tags
    get:
      operationId: tagFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tag:
                    $ref: "#/components/schemas/Tag"
                required:
                  - tag
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tags
      x-eov-operation-handler: tags
    patch:
      operationId: tagUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tag:
                    $ref: "#/components/schemas/Tag"
                required:
                  - tag
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tags
      x-eov-operation-handler: tags
    put:
      operationId: tagUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tagId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TagRequired"
                - $ref: "#/components/schemas/TagPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tag:
                    $ref: "#/components/schemas/Tag"
                required:
                  - tag
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tags
      x-eov-operation-handler: tags
  /landscapes/{landscapeId}/versions/{versionId}/tags:
    get:
      operationId: tagsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/TagFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tags:
                    items:
                      $ref: "#/components/schemas/Tag"
                    type: array
                required:
                  - tags
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tags
      x-eov-operation-handler: tags
    post:
      operationId: tagCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tag:
                    $ref: "#/components/schemas/Tag"
                required:
                  - tag
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tags
      x-eov-operation-handler: tags
  /organizations/{organizationId}/teams:
    get:
      operationId: teamsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  teams:
                    items:
                      $ref: "#/components/schemas/Team"
                    type: array
                required:
                  - teams
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
    post:
      operationId: teamCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: "#/components/schemas/Team"
                required:
                  - team
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
  /organizations/{organizationId}/teams/{teamId}:
    delete:
      operationId: teamDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
    get:
      operationId: teamFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: "#/components/schemas/Team"
                required:
                  - team
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
    patch:
      operationId: teamUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: "#/components/schemas/Team"
                required:
                  - team
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
  /organizations/{organizationId}/teams/{teamId}/landscapes:
    get:
      operationId: teamLandscapesList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscapes:
                    items:
                      $ref: "#/components/schemas/Landscape"
                    type: array
                required:
                  - landscapes
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
  /organizations/{organizationId}/teams/{teamId}/model/objects:
    get:
      operationId: teamModelObjectsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  landscapeModelObjects:
                    additionalProperties:
                      items:
                        $ref: "#/components/schemas/ModelObject"
                      type: array
                    type: object
                required:
                  - landscapeModelObjects
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - teams
      x-eov-operation-handler: teams
  /landscapes/{landscapeId}/versions/{versionId}/tours/{tourId}:
    delete:
      operationId: tourDelete
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tourId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  commit:
                    type: number
                required:
                  - commit
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
    get:
      operationId: tourFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tourId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tour:
                    $ref: "#/components/schemas/Tour"
                required:
                  - tour
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
    patch:
      operationId: tourUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tourId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TourPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tour:
                    $ref: "#/components/schemas/Tour"
                required:
                  - tour
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
    put:
      operationId: tourUpsert
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tourId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TourRequired"
                - $ref: "#/components/schemas/TourPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tour:
                    $ref: "#/components/schemas/Tour"
                required:
                  - tour
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
  /landscapes/{landscapeId}/versions/{versionId}/tours:
    get:
      operationId: toursList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          required: false
          schema:
            $ref: "#/components/schemas/TourFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tours:
                    items:
                      $ref: "#/components/schemas/Tour"
                    type: array
                required:
                  - tours
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
    post:
      operationId: tourCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TourRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  tour:
                    $ref: "#/components/schemas/Tour"
                required:
                  - tour
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
  /landscapes/{landscapeId}/versions/{versionId}/tours/{tourId}/thumbnails:
    get:
      operationId: tourThumbnailsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
        - in: path
          name: tourId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  thumbnails:
                    properties:
                      diagrams:
                        additionalProperties:
                          $ref: "#/components/schemas/DiagramThumbnail"
                        type: object
                      flows:
                        additionalProperties:
                          $ref: "#/components/schemas/FlowThumbnail"
                        type: object
                    required:
                      - diagrams
                      - flows
                    type: object
                required:
                  - thumbnails
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - tours
      x-eov-operation-handler: tours
  /user:
    get:
      operationId: userFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - user
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
    head:
      operationId: userExists
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
    patch:
      operationId: userUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - user
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
    post:
      operationId: userRegister
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserRequired"
                - properties:
                    password:
                      format: password
                      minLength: 8
                      type: string
                    verificationLinkParams:
                      additionalProperties:
                        type: string
                      type: object
                  type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/login:
    post:
      operationId: userLogin
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - user
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/logout:
    post:
      operationId: userLogout
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/reset-password:
    post:
      operationId: userRequestResetPassword
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
              required:
                - email
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/{userId}/reset-password:
    patch:
      operationId: userResetPassword
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: header
          name: Reset-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  format: password
                  minLength: 8
                  type: string
              required:
                - password
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  authToken:
                    type: string
                required:
                  - authToken
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/{userId}/verify-email:
    post:
      operationId: userVerifyEmail
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: header
          name: Verification-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  authToken:
                    type: string
                required:
                  - authToken
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/email:
    post:
      operationId: userEmailPrepare
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
              required:
                - email
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/auth/password:
    post:
      operationId: userAuthPassword
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  format: password
                  minLength: 8
                  type: string
              required:
                - email
                - password
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  authToken:
                    type: string
                required:
                  - authToken
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Resource Exhausted
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user
      x-eov-operation-handler: user
  /user/goals:
    get:
      operationId: userGoalsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  userGoals:
                    items:
                      $ref: "#/components/schemas/UserGoal"
                    type: array
                required:
                  - userGoals
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user-goals
      x-eov-operation-handler: userGoals
  /user/goals/{userGoalId}/progress:
    post:
      operationId: userGoalProgress
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: userGoalId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    increment:
                      type: number
                  required:
                    - increment
                  type: object
                - properties:
                    update:
                      type: number
                  required:
                    - update
                  type: object
                - properties:
                    data:
                      items:
                        type: string
                      type: array
                  required:
                    - data
                  type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  userGoal:
                    $ref: "#/components/schemas/UserGoal"
                required:
                  - userGoal
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - user-goals
      x-eov-operation-handler: userGoals
  /landscapes/{landscapeId}/version-reverts/{versionRevertId}:
    get:
      operationId: versionRevertFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionRevertId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  versionRevert:
                    $ref: "#/components/schemas/VersionRevert"
                required:
                  - versionRevert
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - version-reverts
      x-eov-operation-handler: versionReverts
    patch:
      operationId: versionRevertUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionRevertId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionRevertPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  versionRevert:
                    $ref: "#/components/schemas/VersionRevert"
                required:
                  - versionRevert
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - version-reverts
      x-eov-operation-handler: versionReverts
  /landscapes/{landscapeId}/version-reverts:
    get:
      operationId: versionRevertsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  versionReverts:
                    items:
                      $ref: "#/components/schemas/VersionRevert"
                    type: array
                required:
                  - versionReverts
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - version-reverts
      x-eov-operation-handler: versionReverts
    post:
      operationId: versionRevertCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionRevertRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  versionRevert:
                    $ref: "#/components/schemas/VersionRevert"
                required:
                  - versionRevert
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - version-reverts
      x-eov-operation-handler: versionReverts
  /landscapes/{landscapeId}/versions/{versionId}:
    get:
      operationId: versionFind
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                required:
                  - version
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - versions
      x-eov-operation-handler: versions
    patch:
      operationId: versionUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionPartial"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                required:
                  - version
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - versions
      x-eov-operation-handler: versions
  /landscapes/{landscapeId}/versions:
    get:
      operationId: versionsList
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  versions:
                    items:
                      $ref: "#/components/schemas/Version"
                    type: array
                required:
                  - versions
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - versions
      x-eov-operation-handler: versions
    post:
      operationId: versionCreate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionRequired"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                required:
                  - version
                type: object
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: ConflictError
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - versions
      x-eov-operation-handler: versions
  /landscapes/{landscapeId}/versions/{versionId}/export/json:
    get:
      operationId: versionExportJson
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: landscapeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Export"
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Internal Server
      tags:
        - versions
      x-eov-operation-handler: versions
servers:
  - url: https://api.icepanel.io/v1
